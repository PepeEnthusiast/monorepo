import t from"body-parser";import e from"cors";import s from"express";import a from"http";import*as r from"zeromq";import n from"express-rate-limit";import o from"dotenv";import i from"fs";import{networks as c,bufferUtils as u,crypto as d,address as l,payments as p,Psbt as m,Transaction as h}from"@bitcoin-computer/nakamotojs";import y from"winston";import g from"winston-daily-rotate-file";import w from"pg-promise";import f from"pg-monitor";import{backOff as E}from"exponential-backoff";import{ECPairFactory as T}from"ecpair";import*as S from"@bitcoin-computer/tiny-secp256k1";import $ from"bitcoind-rpc";import v from"util";import{Computer as I}from"@bitcoin-computer/lib";import O from"elliptic";import b from"hash.js";import R,{dirname as x}from"path";import{fileURLToPath as N}from"url";o.config();const M=JSON.parse(i.readFileSync("package.json","utf8"));function C(t,e){switch(t){case"BTC":return"mainnet"===e?c.bitcoin:c.testnet;case"LTC":return"mainnet"===e?c.litecoin:c.litecoinregtest;default:throw new Error("We currently only support BTC and LTC, support for other currencies will be added soon.")}}const{PORT:A,ZMQ_URL:P,CHAIN:j,NETWORK:H,BCN_ENV:L,BCN_URL:B,DEBUG_MODE:_,POSTGRES_USER:D,POSTGRES_PASSWORD:k,POSTGRES_DB:F,POSTGRES_HOST:K,POSTGRES_PORT:U,RPC_PROTOCOL:W,RPC_USER:Y,RPC_PASSWORD:G,RPC_HOST:V,RPC_PORT:J,SERVER_VERSION:q,DEFAULT_WALLET:z,POSTGRES_MAX_PARAM_NUM:Z,DB_CONNECTION_RETRY_TIME:Q,SIGNATURE_FRESHNESS_MINUTES:X,ALLOWED_RPC_METHODS:tt,MAX_BLOCKCHAIN_HEIGHT:et,MWEB_HEIGHT:st,BC_START_HEIGHT:at,WORKER_ID:rt,NUM_WORKERS:nt,SYNC_NON_STANDARD:ot,ZMQ_WAIT_PERCENTAGE:it,QUERY_LIMIT:ct,LOG_MAX_FILE_SIZE:ut,LOG_MAX_FILE_NUM:dt,LOG_ZIP:lt}=process.env;const pt=parseInt(A,10)||"1031";const mt=P||"tcp://node:28332";const ht=j||"LTC";const yt=H||"regtest";const gt=L||"dev";const wt=B||`http://127.0.0.1:${pt}`;const ft=parseInt(_,10)||1;const Et=D||"bcn";const Tt=k||"bcn";const St=F||"bcn";const $t=K||"127.0.0.1";const vt=parseInt(U,10)||"5432";const It=W||"http";const Ot=Y||"bcn-admin";const bt=G||"kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=";const Rt=V||"node";const xt=parseInt(J,10)||19332;const Nt=M.version||q;const Mt=z||"defaultwallet";const Ct=parseInt(Z,10)||1e4;const At=parseInt(Q,10)||500;const Pt=parseInt(X,10)||3;const jt=tt?tt.split(",").map((t=>new RegExp(t))):[];const Ht=parseInt(et||"",10)||2538171;const Lt=parseInt(st||"",10)||432;const Bt=parseInt(at||"",10)||25e5;const _t=parseInt(it||"",10)||.7;const Dt=parseInt(ct||"",10)||1e3;const kt=ut||"20m";const Ft=dt||"14d";const Kt=!!lt;y.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const Ut=y.format.combine(y.format.colorize(),y.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),y.format.json(),y.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const Wt={zippedArchive:Kt,maxSize:kt,maxFiles:Ft,dirname:"logs"};const Yt=[];"dev"===gt&&Yt.push(new y.transports.Console({format:y.format.combine(y.format.colorize(),y.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),y.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))})),ft>=0&&Yt.push(new g({filename:"error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...Wt})),ft>=1&&Yt.push(new g({filename:"warn-%DATE%.log",datePattern:"YYYY-MM-DD",level:"warn",...Wt})),ft>=2&&Yt.push(new g({filename:"info-%DATE%.log",datePattern:"YYYY-MM-DD",level:"info",...Wt})),ft>=3&&Yt.push(new g({filename:"http-%DATE%.log",datePattern:"YYYY-MM-DD",level:"http",...Wt})),ft>=4&&Yt.push(new g({filename:"debug-%DATE%.log",datePattern:"YYYY-MM-DD",level:"debug",...Wt})),Yt.push(new g({filename:"logs-%DATE%.log",datePattern:"YYYY-MM-DD"}));const Gt=y.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:Ut,transports:Yt,exceptionHandlers:[new y.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new y.transports.File({filename:"logs/rejections.log"})]});const Vt=()=>"dev"===gt;const Jt={error:(t,e)=>{if(e.cn){const{host:s,port:a,database:r,user:n,password:o}=e.cn;Gt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${a}, database:${r}, user:${n}, password: ${o}`)}},noWarnings:!0};Vt()&&ft>0&&(f.isAttached()?f.detach():(f.attach(Jt),f.setTheme("matrix")));const qt=w(Jt)({host:$t,port:vt,database:St,user:Et,password:Tt,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:zt}=w;class Zt{static async select(t){const e=new zt({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return qt.oneOrNone(e)}static async insert({id:t,data:e}){const s=new zt({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return qt.none(s)}static async delete(t){const e=new zt({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await qt.any(e))[0].count>0}}class Qt{static async select(t){const e=await Zt.select(t);return e?.data||null}static async insert(t){return Zt.insert(t)}static async delete(t){return Zt.delete(t)}}const Xt=s.Router();Xt.get("/:id",(async({params:{id:t},url:e},s)=>{try{const e=await Qt.select(t);e?s.status(200).json(e):s.status(403).json({error:"No entry found."})}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),Xt.post("/",(async(t,e)=>{const{body:{data:s},url:a}=t;try{const r=d.sha256(Buffer.from(s)).toString("hex");await Qt.insert({id:r,data:s});const n=`${["localhost","127.0.0.1"].includes(t.host)?"http":"https"}://${t.get("host")}/store/${r}`;Gt.info(`Off-chain POST ${a} succeeded with url '${n}'`),e.status(201).json({_url:n})}catch(t){Gt.error(`POST ${a} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),Xt.delete("/:id",(async(t,e)=>{e.status(500).json({error:"Deletions are not supported yet."})}));const{PreparedStatement:te}=w;class ee{static async getBalance(t){const e=new te({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1',values:[t]});const s=await qt.oneOrNone(e);return parseInt(s?.satoshis,10)||0}static async select(t){const e=new te({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "address" = $1',values:[t]});return(await qt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByScriptHex(t){const e=new te({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "scriptPubKey" = $1',values:[t]});return(await qt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByPk(t){const e=new te({name:`Utxos.selectByPk.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout", "publicKeys" FROM "Utxos" WHERE $1 = ANY ("publicKeys")',values:[t]});return(await qt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}}class se{static async getBalance(t){return ee.getBalance(t)}static async select(t){return ee.select(t)}static async selectByScriptHex(t){return ee.selectByScriptHex(t)}static async selectByPk(t){return ee.selectByPk(t)}}class ae{static getBalance=async t=>se.getBalance(t);static select=async t=>se.select(t);static selectByScriptHex=async t=>se.selectByScriptHex(t);static selectByPk=async t=>se.selectByPk(t)}function re(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}function ne(t){if(!re(t))throw new Error("Invalid rev")}const{PreparedStatement:oe}=w;class ie{static async query(t){const{publicKey:e,hash:s,limit:a,offset:r,order:n,ids:o,mod:i}=t;if(a&&parseInt(a||"",10)>Dt||o&&o.length>Dt)throw new Error(`Can't fetch more than ${Dt} revs.`);if(n&&"ASC"!==n&&"DESC"!==n)throw new Error("Invalid order");let c;c=o?.length?'SELECT "rev", "id", array_position($1, "id") as ord\n        FROM "NonStandard" \n        WHERE true ':'SELECT "rev"\n        FROM "NonStandard"\n        WHERE true ';const u=[];s&&(u.push(s),c+=` AND "hash" = $${u.length}`),i&&(u.push(i),c+=` AND "mod" = $${u.length}`),o&&(o.map(ne),u.push(o),c+=` AND "id" = ANY ($${u.length})`),e&&(u.push(e),c+=` AND $${u.length} = ANY ("publicKeys")`),n?(c+=` order by "lastUpdated" ${n}`,o?.length&&(c+=", ord")):o?.length&&(c+=" order by ord"),u.push(a||Dt),c+=` limit $${u.length}`,r&&(u.push(r),c+=` offset $${u.length}`);const d=new oe({name:`NonStandard.query.${Math.random()}`,text:c,values:u});return(await qt.any(d)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:s,hash:a,mod:r}){const n=new oe({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "hash", "mod") VALUES ($1, $2, $3, $4, $5) ON CONFLICT DO NOTHING',values:[t,e,s,a,r]});await qt.none(n)}static async update({id:t,rev:e,publicKeys:s}){const a=new oe({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "rev"=$2, "publicKeys"=$3 WHERE "id" = $1',values:[t,e,s]});return qt.none(a)}static async delete({rev:t}){const e=new oe({name:`NonStandard.delete.${Math.random()}`,text:'DELETE FROM "NonStandard" WHERE "rev" = $1',values:[t]});await qt.none(e)}static async getRevsByIds(t){if(t&&t.length>Dt)throw new Error(`Can't fetch more than ${Dt} revs.`);const e=new oe({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1)',values:[[t]]});return qt.any(e)}static async select(t){const e=new oe({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "hash", "mod" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return qt.oneOrNone(e)}}class ce{static async select(t){return ie.select(t)}static async query(t){return ie.query(t)}static async getRevsByIds(t){return ie.getRevsByIds(t)}static async insert(t){return ie.insert(t)}static async update(t){return ie.update(t)}static async delete(t){return ie.delete({rev:t})}}const{PreparedStatement:ue}=w;class de{static async getId(t){const e=new ue({name:`RevToId.select.${Math.random()}`,text:'SELECT "id" FROM "RevToId" WHERE "rev" = $1',values:[t]});const s=await qt.oneOrNone(e);return s?.id}static async insert(t){const e=new ue({name:`RevToId.insert.${Math.random()}`,text:'INSERT INTO "RevToId"("rev", "id") VALUES ($1, $2)  ON CONFLICT DO NOTHING',values:[t.rev,t.id]});await qt.none(e)}}class le{static async getId(t){return de.getId(t)}static async insert(t){return de.insert(t)}}class pe{static add=async t=>{const{zip:e,outData:s}=t;for(let t=0;t<e.length;t+=1){const[a,r]=e[t];const{exp:n="",_owners:o=[],mod:i=""}=s[t]||{};if(!a&&r)ne(r),await ce.insert({id:r,rev:r,publicKeys:o,hash:d.sha256(Buffer.from(n)).toString("hex"),mod:i}),await le.insert({rev:r,id:r});else if(a&&r){const{id:t,hash:e,mod:s}=await ce.select(a)||{};await ce.update({id:t,rev:r,publicKeys:o,hash:e,mod:s}),await le.insert({rev:r,id:t})}else a&&!r&&await ce.delete(a)}};static query=async t=>ce.query(t);static getRevsByIds=async t=>(await ce.getRevsByIds(t)).map((t=>t.rev))}const me=new $({protocol:It,user:Ot,pass:bt,host:Rt,port:xt});const he=v.promisify($.prototype.createwallet.bind(me));const ye=v.promisify($.prototype.generateToAddress.bind(me));const ge=v.promisify($.prototype.getaddressinfo.bind(me));const we=v.promisify($.prototype.getBlock.bind(me));const fe=v.promisify($.prototype.getBlockchainInfo.bind(me));const Ee=v.promisify($.prototype.getBlockHash.bind(me));const Te=v.promisify($.prototype.getRawTransaction.bind(me));const Se=v.promisify($.prototype.getRawTransaction.bind(me));const $e=v.promisify($.prototype.getTransaction.bind(me));const ve=v.promisify($.prototype.getNewAddress.bind(me));const Ie={createwallet:he,generateToAddress:ye,getaddressinfo:ge,getBlock:we,getBlockchainInfo:fe,getBlockHash:Ee,getRawTransaction:Te,getTransaction:$e,importaddress:v.promisify($.prototype.importaddress.bind(me)),listunspent:v.promisify($.prototype.listunspent.bind(me)),sendRawTransaction:v.promisify($.prototype.sendRawTransaction.bind(me)),getNewAddress:ve,sendToAddress:v.promisify($.prototype.sendToAddress.bind(me)),getRawTransactionJSON:Se};class Oe{static async getTransaction(t){const{result:e}=await Ie.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>Ie.getRawTransaction(t))))).map((t=>t.result))}static async getRawTransactionsJSON(t){return{txId:(e=(await Ie.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:Math.round(1e8*t.value)}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await Ie.sendRawTransaction(t);if(s)throw Gt.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>(void 0===(await Ie.getaddressinfo(t)).result.timestamp&&(Gt.info(`Importing address: ${t}`),await Ie.importaddress(t,!1)),(await Ie.listunspent(0,999999,[t])).result)}class be{static get=async t=>Oe.getTransaction(t);static getRaw=async t=>Oe.getBulkTransactions(t);static getRawJSON=async t=>Oe.getRawTransactionsJSON(t);static sendRaw=async t=>Oe.sendRawTransaction(t);static getUtxos=async t=>Oe.getUtxos(t)}const Re=new $({protocol:It,user:Ot,pass:bt,host:Rt,port:xt});const xe={};const Ne=JSON.parse(JSON.stringify($.callspec));Object.keys(Ne).forEach((t=>{Ne[t.toLowerCase()]=Ne[t]}));const Me={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys($.prototype).forEach((t=>{if(t&&"function"==typeof $.prototype[t]){const e=t.toLowerCase();xe[t]=v.promisify($.prototype[t].bind(Re)),xe[e]=v.promisify($.prototype[e].bind(Re))}}))}catch(t){Gt.error(`Error occurred while binding RPC methods: ${t.message}`)}const{PreparedStatement:Ce}=w;class Ae{static async listSentOutputs(t){const e=new Ce({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await qt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new Ce({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await qt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new Ce({name:`Output.listTxs.${Math.random()}`,text:' -- List all txs sent from a given address\n            WITH SENT AS (\n              SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n              FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n              WHERE "Output".address = $1\n              GROUP BY split_part("Input"."spendingInput",\':\',1)\n            )\n            \n            -- List all tx received from a given address\n            , RECEIVED AS (\n              SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n              FROM "Output" \n              WHERE "address" = $1\n              GROUP BY "txId"\n            )\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n                SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId" ;',values:[t]});const s=(await qt.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new Ce({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Output" WHERE "address" = $1',values:[t]});return qt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,t.publicKeys]));for(;e.length;){const t=e.splice(0,Ct);const s=[];for(let e=1;e<=t.length;e+=5)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const a=s.join(",");const r=new Ce({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "publicKeys") VALUES ${a}  ON CONFLICT DO NOTHING`,values:t});await qt.none(r)}}}class Pe{static async select(t){return Ae.select(t)}static async insert(t){return Ae.insert(t)}static async listSentOutputs(t){return Ae.listSentOutputs(t)}static async listReceivedOutputs(t){return Ae.listReceivedOutputs(t)}static async listTxs(t){return Ae.listTxs(t)}}class je{static insert=async t=>{const e=t.flatMap((t=>t.tx.outs.map(((e,s)=>{const{script:a}=e;let r;let n;try{r=l.fromOutputScript(a,C(ht,yt))}catch(t){r=null}try{n=p.p2ms({output:a,network:C(ht,yt)}).pubkeys.map((t=>t.toString("hex")))}catch(t){n=null}const o=a.toString("hex");const i=Math.round(e.value);return{address:r,rev:`${t.txId}:${s}`,scriptPubKey:o,satoshis:i,publicKeys:n}}))));return Pe.insert(e)};static listSentOutputs=async t=>Pe.listSentOutputs(t);static listReceivedOutputs=async t=>Pe.listReceivedOutputs(t);static listTxs=async t=>Pe.listTxs(t)}const He=t=>new Promise((e=>setTimeout(e,t)));const Le=T(S);const Be=c.regtest;const{PreparedStatement:_e}=w;class De{static async select(t){const e=new _e({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return qt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.outputSpent,t.spendingInput]));for(;e.length;){const t=e.splice(0,Ct);const s=[];for(let e=1;e<=t.length;e+=2)s.push(`($${e}, $${e+1})`);const a=s.join(",");const r=new _e({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput") VALUES ${a} ON CONFLICT DO NOTHING`,values:t});await qt.none(r)}}static async count(t){const e=t.map((t=>t.outputSpent));const s=new _e({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const a=await qt.oneOrNone(s);return parseInt(a?.count,10)||0}}class ke{static async select(t){return De.select(t)}static async insert(t){return De.insert(t)}}class Fe{static getNonCoinbaseRevs=t=>t.filter((t=>!h.isCoinbaseHash(t.input.hash))).map((({input:t,txId:e},s)=>{return{outputSpent:`${a=t.hash,u.reverseBuffer(Buffer.from(a)).toString("hex")}:${t.index}`,spendingInput:`${e}:${s}`};var a}));static insert=async t=>{ke.insert(this.getNonCoinbaseRevs(t))}}let Ke;try{Ke=new I({chain:ht,network:yt,url:wt})}catch(t){Gt.error(`Error creating computer, ${t.message}`),process.exit(1)}class Ue{static syncTx=async t=>{await je.insert([t]),await Fe.insert(t.tx.ins.map((e=>({input:e,txId:t.txId})))),t.isBcTx(ht,yt)&&await pe.add(t)};static rawTxSubscriber=async t=>{const e=t.toString("hex");if(Gt.info(`ZMQ message { rawTx:${e} }`),"08"!==e.slice(10,12)){let t;try{t=await Ke.txFromHex({hex:e})}catch(t){Gt.error(`RawTxSubscriber failed with error '${t.message} ${t.stack}'`)}try{await this.syncTx(t)}catch(t){Gt.error(`Error parsing transaction ${t.message} ${t.stack}`)}}};static checkSyncStatus=async()=>{const t=await E((async()=>{const t=await Ie.getBlockchainInfo();const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const{blocks:s}=t.result;if(Gt.info(`Zmq. Bitcoind { percentage:${e}%, blocks:${s} }`),parseFloat(t.result.verificationprogress)<=_t)throw new Error("Node not ready yet");return t}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const s=t.result.blocks;Gt.info(`BCN reaches sync end...at { bitcoind.progress:${e}%, bitcoindSyncedHeight:${s} }`)};static createWallet=async()=>{try{await Ie.createwallet(Mt,!1,!1,"",!1,!1)}catch(t){Gt.error(`Wallet creation failed with error '${t.message}'`)}};static sub=async t=>{try{await this.createWallet(),"regtest"!==yt&&await this.checkSyncStatus(),await(async()=>{if("regtest"===yt){if(Gt.info(`Node is starting for chain ${ht} and network ${yt}, \n\n. Starting Wallet setup.`),"LTC"===ht){const{result:t}=await Ie.getBlockchainInfo();const e=t.blocks;if(e<Lt){const{result:t}=await Ie.getNewAddress("","legacy");const s=Lt-e-1;s&&await Ie.generateToAddress(s,t);const{result:a}=await Ie.getNewAddress("mweb","mweb");await Ie.sendToAddress(a,1),await Ie.generateToAddress(1,t),Gt.info("MWEB setup is complete")}}if("BTC"===ht){const{result:t}=await Ie.getNewAddress("","legacy");await Ie.generateToAddress(200,t),Gt.info("Wallet setup is complete")}}})(),Gt.info(`Bitcoin Computer Node ${Nt} is ready. MAX_BLOCKCHAIN_HEIGHT: ${Ht}`);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){Gt.error(`ZMQ subscription failed with error '${t.message}'`)}}}const{PreparedStatement:We}=w;class Ye{static async select(t){const e=new We({name:`User.select.${Math.random()}`,text:'SELECT "publicKey", "clientTimestamp" FROM "User" WHERE "publicKey" = $1',values:[t]});const s=await qt.oneOrNone(e);return s?{publicKey:s.publicKey,clientTimestamp:parseInt(s.clientTimestamp,10)||0}:null}static async insert({publicKey:t,clientTimestamp:e}){const s=new We({name:`User.insert.${Math.random()}`,text:'INSERT INTO "User"("publicKey", "clientTimestamp") VALUES ($1, $2)',values:[t,e]});await qt.none(s)}static async update({publicKey:t,clientTimestamp:e}){const s=new We({name:`User.update.${Math.random()}`,text:'UPDATE "User" SET "clientTimestamp"=$1 WHERE "publicKey"=$2',values:[e,t]});await qt.none(s)}}class Ge{static async select(t){return Ye.select(t)}static async insert(t){return Ye.insert(t)}static async update(t){return Ye.update(t)}}const{ec:Ve}=O;const Je=new Ve("secp256k1");const qe=s();const ze=new class{configFile;loaded=!1;load=()=>{try{const t=Vt()?"bcn.test.config.json":"bcn.config.json";const e=x(N(import.meta.url));this.configFile=i.readFileSync(R.join(e,"..","..",t)),this.loaded=!0}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void(this.loaded=!0);throw Gt.error(`Access-list failed with error '${t.message}'`),t}};middleware=({url:t},e,s)=>{if(void 0!==e.locals.authToken)if(this.loaded||(Gt.warn("Access-list failed with error 'AccessList not loaded.'. Loading now."),this.load()),void 0!==this.configFile)try{const{blacklist:t,whitelist:a}=JSON.parse(this.configFile.toString());if(t&&a)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:r}=e.locals.authToken;if(a&&!a.includes(r)||t&&t.includes(r))return void e.status(403).json({error:`Public key ${r} is not allowed.`});s()}catch(s){Gt.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s();else s()}};let Ze;try{Ze=a.createServer(qe)}catch(t){throw Gt.error(`Starting server failed with error '${t.message}'`),t}if(Gt.info(`Server listening on port ${pt}`),qe.use(e()),"dev"!==gt){const t=n({windowMs:9e5,max:300,standardHeaders:!0,legacyHeaders:!1});qe.use(t)}qe.use(t.json({limit:"100mb"})),qe.use(t.urlencoded({limit:"100mb",extended:!0})),qe.get("/",((t,e)=>e.status(200).send(`<h2>Bitcoin Computer Node</h2> <b>Status</b> healthy <br /><b>Version</b> ${Nt}`))),ze.loaded&&(qe.use((async(t,e,s)=>{try{const a=t.get("Authentication");if(!a){const{method:s,url:a}=t;const r=`Auth failed with error 'no Authentication key provided' ${s} ${t.get("Host")} ${a}`;return Gt.error(r),void e.status(401).json({error:r})}const r=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(a);const{signature:n,publicKey:o,timestamp:i}=r;if(Date.now()-i>1e3*Pt*60)return void e.status(401).json({error:"Signature is too old."});const c=b.sha256().update(wt+i).digest("hex");if(!Je.keyFromPublic(o,"hex").verify(c,n)){const t="The origin and public key pair doesn't match the signature.";return void e.status(401).json({error:t})}const u=await Ge.select(o);if(u){if(u.clientTimestamp>=i)return void e.status(401).json({error:"Please use a fresh authentication token."});await Ge.update({publicKey:o,clientTimestamp:i})}else await Ge.insert({publicKey:o,clientTimestamp:i});e.locals.authToken=r,s()}catch(t){Gt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),qe.use(ze.middleware));const Qe=(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ae.select(e))}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/sent-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await je.listSentOutputs(e))}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/received-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await je.listReceivedOutputs(e))}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/list-txs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await je.listTxs(e))}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/non-standard-utxos",(async(t,e)=>{try{const s=new URLSearchParams(t.url.split("?")[1]);const a={mod:s.get("mod"),publicKey:s.get("publicKey"),hash:s.get("hash"),limit:s.get("limit"),order:s.get("order"),offset:s.get("offset"),ids:JSON.parse(s.get("ids"))};const r=await pe.query(a);e.status(200).json(r)}catch(s){Gt.error(`GET ${t.url} failed with error '${s.messages}'`),e.status(404).json({error:s.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ae.getBalance(e))}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(500).json({error:"Missing input txIds."});const e=await be.getRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/post",(async({body:{hex:t},url:e},s)=>{try{if(!t)return void s.status(500).json({error:"Missing input hex."});const e=await be.sendRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Error Occured"})}catch(a){Gt.error(`POST ${e} failed with error '${a.message}\ntxHex: ${t}`),s.status(500).json({error:a.message})}})),t.get("/mine",(async({query:{count:t},url:e},s)=>{try{const{result:e}=await xe.getnewaddress();if("string"!=typeof t)throw new Error("Please provide appropriate count");return await xe.generatetoaddress(parseInt(t,10)||1,e),s.status(200).json({success:!0})}catch(t){return Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/:id/height",(async({params:{id:t},url:e},s)=>{try{let e=t;if("best"===t){const{result:t}=await xe.getbestblockhash();e=t}const{result:a}=await xe.getblockheader(e,!0);return s.status(200).json({height:a.height})}catch(t){return Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/faucet",(async({body:{address:t,value:e},url:s},a)=>{try{const s=(await xe.sendtoaddress(t,parseInt(e,10)/1e8,"","")).result;const r=(await xe.getrawtransaction(s,1)).result.vout.findIndex((t=>1e8*t.value===parseInt(e,10)));return a.status(200).json({txId:s,vout:r,height:-1,satoshis:e})}catch(t){return Gt.error(`POST ${s} failed with error '${t.message}'`),a.status(500).json({error:t.message})}})),t.post("/faucetScript",(async({body:{script:t,value:e},url:s},a)=>{try{const s=Le.makeRandom({network:Be});const r=p.p2pkh({pubkey:s.publicKey,network:Be});const{address:n}=r;const o=(await xe.sendtoaddress(n,2*parseInt(e,10)/1e8,"","")).result;let i;let c=10;for(;!i;)if(i=(await ae.select(n)).filter((t=>t.txId===o))[0],!i){if(c-=1,c<=0)throw new Error("No outputs");await He(10)}const u=(await xe.getrawtransaction(i.txId,1)).result;const d=new m({network:Be});d.addInput({hash:i.txId,index:i.vout,nonWitnessUtxo:Buffer.from(u.hex,"hex")}),d.addOutput({script:Buffer.from(t,"hex"),value:parseInt(e,10)}),d.signInput(0,s),d.finalizeAllInputs();const l=d.extractTransaction();let h;for(await xe.sendrawtransaction(l.toHex()),c=5;!h;)if(h=(await ae.selectByScriptHex(t)).filter((t=>t.txId===l.getId()))[0],!h){if(c-=1,c<=0)throw new Error("No outputs");await He(10)}return a.status(200).json({txId:l.getId(),vout:h.vout,height:-1,satoshis:h.satoshis})}catch(t){return Gt.error(`POST ${s} failed with error '${t.message}'`),a.status(500).json({error:t.message})}})),t.get("/tx/:txId/json",(async({params:{txId:t},url:e},s)=>{try{if(!t)return void s.status(500).json({error:"Missing input txId."});const e=await be.getRawJSON(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){Gt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(404).json({error:"Missing input object ids."});const e=await pe.getRevsByIds(t);s.status(200).json(e)}catch(t){Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/revToId",(async({body:{rev:t},url:e},s)=>{try{if(!re(t))return void s.status(400).json({error:"Invalid rev id"});const e=await le.getId(t);e&&s.status(200).json(e),s.status(404).json()}catch(t){Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!jt.some((e=>e.test(t.method))))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===Ne[t]||null===Ne[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const a=Ne[t].trim().split(" ");if(0===e.trim().length&&0!==Ne[t].trim().length)throw new Error(`Too few params provided. Expected ${a.length} Provided 0`);if(0!==e.trim().length&&0===Ne[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<a.length)throw new Error(`Too few params provided. Expected ${a.length} Provided ${s.length}`);if(s.length>a.length)throw new Error(`Too many params provided. Expected ${a.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>Me[a[e]](t)))}(t.method,t.params);const a=e.length?await xe[t.method](...e):await xe[t.method]();s.status(200).json({result:a})}catch(t){Gt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib to the latest version."})})),t})();qe.use(`/v1/${ht}/${yt}`,Qe),qe.use("/v1/store",Xt),Ze.listen(pt,(()=>{Gt.info(`Rev ${Nt} Started web server on port ${pt} BC_START_HEIGHT ${Bt}`)})).on("error",(t=>{Gt.error(t.message),process.exit(1)}));const Xe=new r.Subscriber;Xe.connect(mt),Xe.subscribe("rawtx"),Gt.info(`ZMQ Subscriber connected to ${mt}`),(async()=>{await(async()=>{await E((()=>qt.connect()),{startingDelay:At})})(),await Ue.sub(Xe)})();
