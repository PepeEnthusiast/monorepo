import t from"body-parser";import e from"cors";import s from"express";import r from"http";import*as a from"zeromq";import n from"express-rate-limit";import*as o from"@bitcoin-computer/tiny-secp256k1";import{networks as i,bufferUtils as c,crypto as u,address as p,payments as l,Psbt as d,Transaction as m,initEccLib as h}from"@bitcoin-computer/nakamotojs";import y from"dotenv";import g from"winston";import w from"winston-daily-rotate-file";import f from"pg-promise";import v from"pg-monitor";import{backOff as E}from"exponential-backoff";import $ from"fs";import{ECPairFactory as S}from"ecpair";import O from"bitcoind-rpc";import T from"util";import{Computer as R}from"@bitcoin-computer/lib";import b from"elliptic";import I from"hash.js";import x,{dirname as M}from"path";import{fileURLToPath as N}from"url";y.config();const P=process.env.CHAIN;const C=process.env.NETWORK;const{PORT:A}=process.env;const{POSTGRES_USER:L}=process.env;const{POSTGRES_PASSWORD:j}=process.env;const{POSTGRES_DB:B}=process.env;const{POSTGRES_HOST:H}=process.env;const{POSTGRES_PORT:U}=process.env;const{RPC_USER:k}=process.env;const{RPC_PASSWORD:F}=process.env;process.env;const{RPC_HOST:K}=process.env;const{RPC_PORT:D}=process.env;const{RPC_PROTOCOL:W}=process.env;const{ZMQ_URL:_}=process.env;const{DEFAULT_WALLET:Y}=process.env;const{ALLOWED_RPC_METHODS:G}=process.env;const{DEBUG_MODE:q}=process.env;const{LOG_MAX_FILES:J}=process.env;const{LOG_MAX_SIZE:V}=process.env;const{LOG_ZIP:z}=process.env;process.env;const Z=process.env.QUERY_LIMIT||"1000";const Q=process.env.WORKER_ID||"1";process.env.NUM_WORKERS;const X=process.env.BCN_URL||`http://127.0.0.1:${A}`;const tt=process.env.BCN_ENV||"dev";g.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const et=g.format.combine(g.format.colorize(),g.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),g.format.json(),g.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const st={zippedArchive:!!z,maxSize:V,maxFiles:J,dirname:"logs"};const rt=[];"dev"===tt&&rt.push(new g.transports.Console({format:g.format.combine(g.format.colorize(),g.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),g.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))}));const at=parseInt(q,10);at>=0&&rt.push(new w({filename:`error${Q}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"error",...st})),at>=1&&rt.push(new w({filename:`warn${Q}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"warn",...st})),at>=2&&rt.push(new w({filename:`info${Q}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"info",...st})),at>=3&&rt.push(new w({filename:`http${Q}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"http",...st})),at>=4&&rt.push(new w({filename:`debug${Q}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"debug",...st}));const nt=g.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:et,transports:rt,exceptionHandlers:[new g.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new g.transports.File({filename:"logs/rejections.log"})]});const ot=()=>"dev"===tt;y.config();const{version:it}=JSON.parse($.readFileSync("package.json","utf8"));const ct=it||process.env.SERVER_VERSION;const ut=parseInt(process.env.MWEB_HEIGHT||"",10)||432;const pt={error:(t,e)=>{if(e.cn){const{host:s,port:r,database:a,user:n,password:o}=e.cn;nt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${r}, database:${a}, user:${n}, password: ${o}`)}},noWarnings:!0};ot()&&parseInt(q,10)>0&&(v.isAttached()?v.detach():(v.attach(pt),v.setTheme("matrix")));const lt=f(pt)({host:H,port:parseInt(U,10),database:B,user:L,password:j,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:dt}=f;class mt{static async select(t){const e=new dt({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return lt.oneOrNone(e)}static async insert({id:t,data:e}){const s=new dt({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return lt.none(s)}static async delete(t){const e=new dt({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await lt.any(e))[0].count>0}}class ht{static async select(t){const e=await mt.select(t);return e?.data||null}static async insert(t){return mt.insert(t)}static async delete(t){return mt.delete(t)}}const yt=s.Router();yt.get("/:id",(async({params:{id:t},url:e},s)=>{try{const e=await ht.select(t);e?s.status(200).json(e):s.status(403).json({error:"No entry found."})}catch(t){nt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),yt.post("/",(async(t,e)=>{const{body:{data:s},url:r}=t;try{const r=u.sha256(Buffer.from(s)).toString("hex");await ht.insert({id:r,data:s});const a=`${t.protocol}://${t.get("host")}/store/${r}`;e.status(201).json({_url:a})}catch(t){nt.error(`POST ${r} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),yt.delete("/:id",(async(t,e)=>{e.status(500).json({error:"Deletions are not supported yet."})}));const{PreparedStatement:gt}=f;class wt{static async getBalance(t){const e=new gt({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1',values:[t]});const s=await lt.oneOrNone(e);return parseInt(s?.satoshis,10)||0}static async select(t){const e=new gt({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "address" = $1',values:[t]});return(await lt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByScriptHex(t){const e=new gt({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "scriptPubKey" = $1',values:[t]});return(await lt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByPk(t){const e=new gt({name:`Utxos.selectByPk.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout", "publicKeys" FROM "Utxos" WHERE $1 = ANY ("publicKeys")',values:[t]});return(await lt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}}class ft{static async getBalance(t){return wt.getBalance(t)}static async select(t){return wt.select(t)}static async selectByScriptHex(t){return wt.selectByScriptHex(t)}static async selectByPk(t){return wt.selectByPk(t)}}class vt{static getBalance=async t=>ft.getBalance(t);static select=async t=>ft.select(t);static selectByScriptHex=async t=>ft.selectByScriptHex(t);static selectByPk=async t=>ft.selectByPk(t)}const Et={protocol:W,user:k,pass:F,host:K,port:parseInt(D,10)};const $t=new O(Et);const St=T.promisify(O.prototype.createwallet.bind($t));const Ot=T.promisify(O.prototype.generateToAddress.bind($t));const Tt=T.promisify(O.prototype.getaddressinfo.bind($t));const Rt=T.promisify(O.prototype.getBlock.bind($t));const bt=T.promisify(O.prototype.getBlockchainInfo.bind($t));const It=T.promisify(O.prototype.getBlockHash.bind($t));const xt=T.promisify(O.prototype.getRawTransaction.bind($t));const Mt=T.promisify(O.prototype.getRawTransaction.bind($t));const Nt=T.promisify(O.prototype.getTransaction.bind($t));const Pt=T.promisify(O.prototype.getNewAddress.bind($t));const Ct={createwallet:St,generateToAddress:Ot,getaddressinfo:Tt,getBlock:Rt,getBlockchainInfo:bt,getBlockHash:It,getRawTransaction:xt,getTransaction:Nt,importaddress:T.promisify(O.prototype.importaddress.bind($t)),listunspent:T.promisify(O.prototype.listunspent.bind($t)),sendRawTransaction:T.promisify(O.prototype.sendRawTransaction.bind($t)),getNewAddress:Pt,sendToAddress:T.promisify(O.prototype.sendToAddress.bind($t)),getRawTransactionJSON:Mt};class At{static async getTransaction(t){const{result:e}=await Ct.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>Ct.getRawTransaction(t))))).map((t=>t.result))}static async getRawTransactionsJSON(t){return{txId:(e=(await Ct.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:Math.round(1e8*t.value)}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await Ct.sendRawTransaction(t);if(s)throw nt.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>(void 0===(await Ct.getaddressinfo(t)).result.timestamp&&(nt.info(`Importing address: ${t}`),await Ct.importaddress(t,!1)),(await Ct.listunspent(0,999999,[t])).result)}class Lt{static get=async t=>At.getTransaction(t);static getRaw=async t=>At.getBulkTransactions(t);static getRawJSON=async t=>At.getRawTransactionsJSON(t);static sendRaw=async t=>At.sendRawTransaction(t);static getUtxos=async t=>At.getUtxos(t)}const jt={protocol:W,user:k,pass:F,host:K,port:parseInt(D,10)};const Bt=new O(jt);const Ht={};const Ut=JSON.parse(JSON.stringify(O.callspec));Object.keys(Ut).forEach((t=>{Ut[t.toLowerCase()]=Ut[t]}));const kt={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(O.prototype).forEach((t=>{if(t&&"function"==typeof O.prototype[t]){const e=t.toLowerCase();Ht[t]=T.promisify(O.prototype[t].bind(Bt)),Ht[e]=T.promisify(O.prototype[e].bind(Bt))}}))}catch(t){nt.error(`Error occurred while binding RPC methods: ${t.message}`)}function Ft(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}function Kt(t){if(!Ft(t))throw new Error("Invalid rev")}const{PreparedStatement:Dt}=f;class Wt{static async listSentOutputs(t){const e=new Dt({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await lt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new Dt({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await lt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new Dt({name:`Output.listTxs.${Math.random()}`,text:'WITH\n              -- List all txs sent from a given address\n              SENT AS (\n                SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n                FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n                WHERE "Output".address = $1\n                GROUP BY split_part("Input"."spendingInput",\':\',1)\n              ),\n              -- List all tx received from a given address\n              RECEIVED AS (\n                SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n                FROM "Output" \n                WHERE "address" = $1\n                GROUP BY "txId"\n              )\n\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n              SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId";',values:[t]});const s=(await lt.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new Dt({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", "publicKeys", "hash", "mod", "isTbcOutput", "previous" FROM "Output" WHERE "address" = $1',values:[t]});return lt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,t.publicKeys,t.hash,t.mod,t.isTbcOutput,t.previous]));for(;e.length;){const t=e.splice(0,1e4);const s=[];for(let e=1;e<=t.length;e+=9)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4}, $${e+5}, $${e+6}, $${e+7}, $${e+8})`);const r=s.join(",");const a=new Dt({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "publicKeys", "hash", "mod", "isTbcOutput", "previous") VALUES ${r}  ON CONFLICT DO NOTHING`,values:t});await lt.none(a)}}static async getIdByRev(t){const e=new Dt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await lt.any(e)).filter((t=>null===t.previous));return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map((t=>this.getIdByRev(t))))}static async getLatestRev(t){const e=new Dt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await lt.any(e);const r=Object.fromEntries(s.map((t=>[t.previous,t.rev])));let a=t;for(;r[a];)a=r[a];return a}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new Dt({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await lt.any(e)).map((t=>t.rev))}static sqlSuffix(t,e,s){let r="";return s&&(r+=` order by "timestamp" ${s}`),r+=` limit ${t||Z}`,e&&(r+=` offset ${e}`),r}static async getRevsByPublicKey(t){const e=new Dt({name:`Output.getRevsByPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys")',values:[t]});return(await lt.any(e)).map((t=>t.rev))}static async getUnspentRevsByMod(t,e,s,r){const a=await this.getIdsByMod(t);const n=await this.getLatestRevs(a);const o=new Dt({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,r)}`,values:[n]});return(await lt.any(o)).map((t=>t.rev))}static async getUnspentRevsByPublicKey(t,e,s,r){const a=new Dt({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys") AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,r)}`,values:[t]});return(await lt.any(a)).map((t=>t.rev))}static async getUnspentRevsByModAndPublicKey(t,e,s,r,a){const n=await this.getUnspentRevsByPublicKey(e,s,r,a);const o=await this.getIdsByRevs(n);const i=new Dt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const c=(await lt.any(i)).map((t=>t.rev));const u=await this.getLatestRevs(c);const p=new Dt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,r,a)}`,values:[u]});return(await lt.any(p)).map((t=>t.rev))}static async query(t){const{publicKey:e,limit:s,offset:r,ids:a,mod:n,order:o}=t;const i=parseInt(Z||"",10);if(s&&parseInt(s||"",10)>i||a&&a.length>i)throw new Error(`Can't fetch more than ${Z} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return a?.length?(a.map(Kt),this.getLatestRevs(a)):n&&!e?this.getUnspentRevsByMod(n,s,r,o):!n&&e?this.getUnspentRevsByPublicKey(e,s,r,o):n&&e?this.getUnspentRevsByModAndPublicKey(n,e,s,r,o):[]}}class _t{static async select(t){return Wt.select(t)}static async insert(t){return Wt.insert(t)}static async listSentOutputs(t){return Wt.listSentOutputs(t)}static async listReceivedOutputs(t){return Wt.listReceivedOutputs(t)}static async listTxs(t){return Wt.listTxs(t)}static async getLatestRev(t){return Wt.getLatestRev(t)}static async query(t){return Wt.query(t)}}class Yt{static insert=async t=>{const e=t.flatMap((t=>{let e=[];let s=[];try{({zip:e,outData:s}=t)}catch(t){}return t.tx.outs.map(((r,a)=>{const{script:n}=r;let o=null;let c=null;let l=!1;let d=null;let m="";let h=[];let y="";if(a<e.length){const[r,n]=e[a];c=r,l=!0,y=s[a]?.exp||"",m=s[a]?.mod||"",d=u.sha256(Buffer.from(y)).toString("hex"),h=s[a]?._owners||[],n!==`${t.txId}:${a}`&&nt.error(`Error on output insertions outRev is not matching txId and output number: ${e[a].outRev} !== ${t.txId}:${a}`)}try{o=p.fromOutputScript(n,function(t=P,e=C){switch(t){case"BTC":switch(e){case"mainnet":return i.bitcoin;case"testnet":return i.testnet;case"regtest":return i.regtest;default:throw new Error(`Invalid network ${e}`)}case"LTC":switch(e){case"mainnet":return i.litecoin;case"testnet":return i.litecointestnet;case"regtest":return i.litecoinregtest;default:throw new Error(`Invalid network ${e}`)}default:throw new Error(`Invalid chain ${e}`)}}(P,C))}catch(t){}const g=n.toString("hex");const w=Math.round(r.value);return{address:o,rev:`${t.txId}:${a}`,scriptPubKey:g,satoshis:w,publicKeys:h,hash:d,previous:c,mod:m,isTbcOutput:l}}))}));return _t.insert(e)};static listSentOutputs=async t=>_t.listSentOutputs(t);static listReceivedOutputs=async t=>_t.listReceivedOutputs(t);static listTxs=async t=>_t.listTxs(t);static getLatestRev=async t=>_t.getLatestRev(t);static query=async t=>_t.query(t)}const Gt=t=>new Promise((e=>setTimeout(e,t)));const qt=S(o);const Jt=i.regtest;const{PreparedStatement:Vt}=f;class zt{static async select(t){const e=new Vt({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return lt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.outputSpent,t.spendingInput]));for(;e.length;){const t=e.splice(0,1e4);const s=[];for(let e=1;e<=t.length;e+=2)s.push(`($${e}, $${e+1})`);const r=s.join(",");const a=new Vt({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput") VALUES ${r} ON CONFLICT DO NOTHING`,values:t});await lt.none(a)}}static async count(t){const e=t.map((t=>t.outputSpent));const s=new Vt({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const r=await lt.oneOrNone(s);return parseInt(r?.count,10)||0}}class Zt{static async select(t){return zt.select(t)}static async insert(t){return zt.insert(t)}}class Qt{static getNonCoinbaseRevs=t=>t.filter((t=>!m.isCoinbaseHash(t.input.hash))).map((({input:t,txId:e},s)=>{return{outputSpent:`${r=t.hash,c.reverseBuffer(Buffer.from(r)).toString("hex")}:${t.index}`,spendingInput:`${e}:${s}`};var r}));static insert=async t=>{const e=t.flatMap((t=>t.tx.ins.map((e=>({input:e,txId:t.txId})))));Zt.insert(this.getNonCoinbaseRevs(e))}}let Xt;try{Xt=new R({chain:P,network:C,url:X})}catch(t){nt.error(`Error creating computer, ${t.message}`),process.exit(1)}class te{static rawTxSubscriber=async t=>{const e=t.toString("hex");if(nt.info(`ZMQ message { rawTx:${e} }`),"08"!==e.slice(10,12))try{const t=await Xt.txFromHex({hex:e});await Yt.insert([t]),await Qt.insert([t])}catch(t){nt.error(`Error parsing transaction ${t.message} ${t.stack}`)}};static checkSyncStatus=async()=>{const t=await E((async()=>{const t=await Ct.getBlockchainInfo();const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const{blocks:s}=t.result;if(nt.info(`Zmq. Bitcoind { percentage:${e}%, blocks:${s} }`),parseFloat(t.result.verificationprogress)<=.7)throw new Error("Node not ready yet");return t}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const s=t.result.blocks;nt.info(`BCN reaches sync end...at { bitcoind.progress:${e}%, bitcoindSyncedHeight:${s} }`)};static createWallet=async()=>{try{await Ct.createwallet(Y,!1,!1,"",!1,!1)}catch(t){nt.error(`Wallet creation failed with error '${t.message}'`)}};static sub=async t=>{try{await this.createWallet(),"regtest"!==C&&await this.checkSyncStatus(),await(async()=>{if("regtest"===C){if(nt.info(`Node is starting for chain ${P} and network ${C}, \n\n. Starting Wallet setup.`),"LTC"===P){const{result:t}=await Ct.getBlockchainInfo();const e=t.blocks;if(e<ut){const{result:t}=await Ct.getNewAddress("","legacy");const s=ut-e-1;s&&await Ct.generateToAddress(s,t);const{result:r}=await Ct.getNewAddress("mweb","mweb");await Ct.sendToAddress(r,1),await Ct.generateToAddress(1,t),nt.info("MWEB setup is complete")}}if("BTC"===P){const{result:t}=await Ct.getNewAddress("","legacy");await Ct.generateToAddress(200,t),nt.info("Wallet setup is complete")}}})(),nt.info(`Bitcoin Computer Node ${ct} is ready. MAX_BLOCKCHAIN_HEIGHT: 2538171`);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){nt.error(`ZMQ subscription failed with error '${t.message}'`)}}}const{PreparedStatement:ee}=f;class se{static async select(t){const e=new ee({name:`User.select.${Math.random()}`,text:'SELECT "publicKey", "clientTimestamp" FROM "User" WHERE "publicKey" = $1',values:[t]});const s=await lt.oneOrNone(e);return s?{publicKey:s.publicKey,clientTimestamp:parseInt(s.clientTimestamp,10)||0}:null}static async insert({publicKey:t,clientTimestamp:e}){const s=new ee({name:`User.insert.${Math.random()}`,text:'INSERT INTO "User"("publicKey", "clientTimestamp") VALUES ($1, $2)',values:[t,e]});await lt.none(s)}static async update({publicKey:t,clientTimestamp:e}){const s=new ee({name:`User.update.${Math.random()}`,text:'UPDATE "User" SET "clientTimestamp"=$1 WHERE "publicKey"=$2',values:[e,t]});await lt.none(s)}}class re{static async select(t){return se.select(t)}static async insert(t){return se.insert(t)}static async update(t){return se.update(t)}}const{ec:ae}=b;const ne=new ae("secp256k1");const oe=s();const ie=new class{configFile;loaded=!1;load=()=>{try{const t=ot()?"bcn.test.config.json":"bcn.config.json";const e=M(N(import.meta.url));this.configFile=$.readFileSync(x.join(e,"..","..",t)),this.loaded=!0}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void(this.loaded=!0);throw nt.error(`Access-list failed with error '${t.message}'`),t}};middleware=({url:t},e,s)=>{if(void 0!==e.locals.authToken)if(this.loaded||(nt.warn("Access-list failed with error 'AccessList not loaded.'. Loading now."),this.load()),void 0!==this.configFile)try{const{blacklist:t,whitelist:r}=JSON.parse(this.configFile.toString());if(t&&r)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:a}=e.locals.authToken;if(r&&!r.includes(a)||t&&t.includes(a))return void e.status(403).json({error:`Public key ${a} is not allowed.`});s()}catch(s){nt.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s();else s()}};let ce;h(o);try{ce=r.createServer(oe)}catch(t){throw nt.error(`Starting server failed with error '${t.message}'`),t}if(nt.info(`Server listening on port ${A}`),oe.use(e()),"dev"!==tt){const t=n({windowMs:9e5,max:300,standardHeaders:!0,legacyHeaders:!1});oe.use(t)}oe.use(t.json({limit:"100mb"})),oe.use(t.urlencoded({limit:"100mb",extended:!0})),oe.get("/",((t,e)=>e.status(200).send(`\n        <h2>Bitcoin Computer Node</h2>\n        <b>Status</b>: Healthy <br />\n        <b>Version</b>: ${ct} <br />\n        <b>Chain</b>: ${P} <br />\n        <b>Network</b>: ${C}\n    `))),ie.loaded&&(oe.use((async(t,e,s)=>{try{const r=t.get("Authentication");if(!r){const{method:s,url:r}=t;const a=`Auth failed with error 'no Authentication key provided' ${s} ${t.get("Host")} ${r}`;return nt.error(a),void e.status(401).json({error:a})}const a=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(r);const{signature:n,publicKey:o,timestamp:i}=a;if(Date.now()-i>18e4)return void e.status(401).json({error:"Signature is too old."});const c=I.sha256().update(X+i).digest("hex");if(!ne.keyFromPublic(o,"hex").verify(c,n)){const t="The origin and public key pair doesn't match the signature.";return void e.status(401).json({error:t})}const u=await re.select(o);if(u){if(u.clientTimestamp>=i)return void e.status(401).json({error:"Please use a fresh authentication token."});await re.update({publicKey:o,clientTimestamp:i})}else await re.insert({publicKey:o,clientTimestamp:i});e.locals.authToken=a,s()}catch(t){nt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),oe.use(ie.middleware));const ue=(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await vt.select(e))}catch(t){nt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/sent-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Yt.listSentOutputs(e))}catch(t){nt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/received-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Yt.listReceivedOutputs(e))}catch(t){nt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/list-txs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Yt.listTxs(e))}catch(t){nt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/non-standard-utxos",(async(t,e)=>{try{const s=new URLSearchParams(t.url.split("?")[1]);const r={mod:s.get("mod"),publicKey:s.get("publicKey"),limit:s.get("limit"),order:s.get("order"),offset:s.get("offset"),ids:JSON.parse(s.get("ids"))};const a=await Yt.query(r);e.status(200).json(a)}catch(s){nt.error(`GET ${t.url} failed with error '${s.messages}'`),e.status(404).json({error:s.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await vt.getBalance(e))}catch(t){nt.error(`GET ${e} failed with error '${t.message||t}'`),s.status(404).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(500).json({error:"Missing input txIds."});const e=await Lt.getRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){nt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/post",(async({body:{hex:t},url:e},s)=>{try{if(!t)return void s.status(500).json({error:"Missing input hex."});const e=await Lt.sendRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Error Occured"})}catch(r){nt.error(`POST ${e} failed with error '${r.message}\ntxHex: ${t}`),s.status(500).json({error:r.message})}})),t.get("/mine",(async({query:{count:t},url:e},s)=>{try{const{result:e}=await Ht.getnewaddress();if("string"!=typeof t)throw new Error("Please provide appropriate count");return await Ht.generatetoaddress(parseInt(t,10)||1,e),s.status(200).json({success:!0})}catch(t){return nt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/:id/height",(async({params:{id:t},url:e},s)=>{try{let e=t;if("best"===t){const{result:t}=await Ht.getbestblockhash();e=t}const{result:r}=await Ht.getblockheader(e,!0);return s.status(200).json({height:r.height})}catch(t){return nt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/faucet",(async({body:{address:t,value:e},url:s},r)=>{try{const s=parseInt(e,10)/1e8;const{result:a}=await Ht.sendtoaddress(t,s);await Ht.generateToAddress(1,"mvFeNF9DAR7WMuCpBPbKuTtheihLyxzj8i");const{result:n}=await Ht.getrawtransaction(a,1);const o=n.vout.findIndex((t=>1e8*t.value===parseInt(e,10)));return r.status(200).json({txId:a,vout:o,height:-1,satoshis:e})}catch(t){return nt.error(`POST ${s} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),t.post("/faucetScript",(async({body:{script:t,value:e},url:s},r)=>{try{const s=qt.makeRandom({network:Jt});const a=l.p2pkh({pubkey:s.publicKey,network:Jt});const{address:n}=a;const o=(await Ht.sendtoaddress(n,2*parseInt(e,10)/1e8,"","")).result;let i;let c=10;for(;!i;)if(i=(await vt.select(n)).filter((t=>t.txId===o))[0],!i){if(c-=1,c<=0)throw new Error("No outputs");await Gt(10)}const u=(await Ht.getrawtransaction(i.txId,1)).result;const p=new d({network:Jt});p.addInput({hash:i.txId,index:i.vout,nonWitnessUtxo:Buffer.from(u.hex,"hex")}),p.addOutput({script:Buffer.from(t,"hex"),value:parseInt(e,10)}),p.signInput(0,s),p.finalizeAllInputs();const m=p.extractTransaction();let h;for(await Ht.sendrawtransaction(m.toHex()),c=5;!h;)if(h=(await vt.selectByScriptHex(t)).filter((t=>t.txId===m.getId()))[0],!h){if(c-=1,c<=0)throw new Error("No outputs");await Gt(10)}return r.status(200).json({txId:m.getId(),vout:h.vout,height:-1,satoshis:h.satoshis})}catch(t){return nt.error(`POST ${s} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),t.get("/tx/:txId/json",(async({params:{txId:t},url:e},s)=>{try{if(!t)return void s.status(500).json({error:"Missing input txId."});const e=await Lt.getRawJSON(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){nt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(404).json({error:"Missing input object ids."});const e=await Wt.getLatestRevs(t);s.status(200).json(e)}catch(t){nt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/revToId",(async({body:{rev:t},url:e},s)=>{try{if(!Ft(t))return void s.status(400).json({error:"Invalid rev id"});const e=await Wt.getIdByRev(t);e&&s.status(200).json(e),s.status(404).json()}catch(t){nt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!new RegExp(G).test(t.method))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===Ut[t]||null===Ut[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const r=Ut[t].trim().split(" ");if(0===e.trim().length&&0!==Ut[t].trim().length)throw new Error(`Too few params provided. Expected ${r.length} Provided 0`);if(0!==e.trim().length&&0===Ut[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<r.length)throw new Error(`Too few params provided. Expected ${r.length} Provided ${s.length}`);if(s.length>r.length)throw new Error(`Too many params provided. Expected ${r.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>kt[r[e]](t)))}(t.method,t.params);const r=e.length?await Ht[t.method](...e):await Ht[t.method]();s.status(200).json({result:r})}catch(t){nt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib to the latest version."})})),t})();if("mainnet"===C)throw new Error("Mainnet is currently disabled in your jurisdiction");oe.use(`/v1/${P}/${C}`,ue),oe.use("/v1/store",yt),ce.listen(A,(()=>{nt.info(`\nStarted Bitcoin Computer Node Version ${ct}\nPORT ${A} \n`)})).on("error",(t=>{nt.error(t.message),process.exit(1)}));const pe=new a.Subscriber;pe.connect(_),pe.subscribe("rawtx"),nt.info(`ZMQ Subscriber connected to ${_}`),(async()=>{await(async()=>{await E((()=>lt.connect()),{startingDelay:500})})(),await te.sub(pe)})();
