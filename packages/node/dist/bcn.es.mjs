import t from"body-parser";import e from"cors";import s from"express";import r from"http";import*as a from"zeromq";import n from"express-rate-limit";import*as o from"@bitcoin-computer/tiny-secp256k1";import{networks as i,bufferUtils as c,crypto as u,address as d,payments as l,Psbt as p,Transaction as m,initEccLib as h}from"@bitcoin-computer/nakamotojs";import y from"dotenv";import g from"winston";import w from"winston-daily-rotate-file";import f from"pg-promise";import E from"pg-monitor";import{backOff as v}from"exponential-backoff";import $ from"fs";import{ECPairFactory as S}from"ecpair";import T from"bitcoind-rpc";import I from"util";import{Computer as O}from"@bitcoin-computer/lib";import b from"elliptic";import x from"hash.js";import R,{dirname as N}from"path";import{fileURLToPath as M}from"url";y.config();const P=process.env.CHAIN;const C=process.env.NETWORK;const{PORT:A}=process.env;const{POSTGRES_USER:j}=process.env;const{POSTGRES_PASSWORD:H}=process.env;const{POSTGRES_DB:B}=process.env;const{POSTGRES_HOST:L}=process.env;const{POSTGRES_PORT:k}=process.env;const{RPC_USER:D}=process.env;const{RPC_PASSWORD:F}=process.env;process.env;const{RPC_HOST:K}=process.env;const{RPC_PORT:_}=process.env;const{RPC_PROTOCOL:W}=process.env;const{ZMQ_URL:U}=process.env;const{DEFAULT_WALLET:Y}=process.env;const{ALLOWED_RPC_METHODS:G}=process.env;const{DEBUG_MODE:V}=process.env;const{LOG_MAX_FILES:J}=process.env;const{LOG_MAX_SIZE:q}=process.env;const{LOG_ZIP:z}=process.env;process.env;const Z=process.env.QUERY_LIMIT||"1000";process.env.WORKER_ID,process.env.SYNC_NON_STANDARD,process.env.NUM_WORKERS;const Q=process.env.BCN_URL||`http://127.0.0.1:${A}`;const X=process.env.BCN_ENV||"dev";g.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const tt=g.format.combine(g.format.colorize(),g.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),g.format.json(),g.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const et={zippedArchive:!!z,maxSize:q,maxFiles:J,dirname:"logs"};const st=[];"dev"===X&&st.push(new g.transports.Console({format:g.format.combine(g.format.colorize(),g.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),g.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))}));const rt=parseInt(V,10);rt>=0&&st.push(new w({filename:"error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...et})),rt>=1&&st.push(new w({filename:"warn-%DATE%.log",datePattern:"YYYY-MM-DD",level:"warn",...et})),rt>=2&&st.push(new w({filename:"info-%DATE%.log",datePattern:"YYYY-MM-DD",level:"info",...et})),rt>=3&&st.push(new w({filename:"http-%DATE%.log",datePattern:"YYYY-MM-DD",level:"http",...et})),rt>=4&&st.push(new w({filename:"debug-%DATE%.log",datePattern:"YYYY-MM-DD",level:"debug",...et}));const at=g.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:tt,transports:st,exceptionHandlers:[new g.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new g.transports.File({filename:"logs/rejections.log"})]});const nt=()=>"dev"===X;function ot(t=P,e=C){switch(t){case"BTC":switch(e){case"mainnet":return i.bitcoin;case"testnet":return i.testnet;case"regtest":return i.regtest;default:throw new Error(`Invalid network ${e}`)}case"LTC":switch(e){case"mainnet":return i.litecoin;case"testnet":return i.litecointestnet;case"regtest":return i.litecoinregtest;default:throw new Error(`Invalid network ${e}`)}default:throw new Error(`Invalid chain ${e}`)}}y.config();const{version:it}=JSON.parse($.readFileSync("package.json","utf8"));const ct=it||process.env.SERVER_VERSION;const ut=parseInt(process.env.MWEB_HEIGHT||"",10)||432;const dt={error:(t,e)=>{if(e.cn){const{host:s,port:r,database:a,user:n,password:o}=e.cn;at.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${r}, database:${a}, user:${n}, password: ${o}`)}},noWarnings:!0};nt()&&parseInt(V,10)>0&&(E.isAttached()?E.detach():(E.attach(dt),E.setTheme("matrix")));const lt=f(dt)({host:L,port:parseInt(k,10),database:B,user:j,password:H,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:pt}=f;class mt{static async select(t){const e=new pt({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return lt.oneOrNone(e)}static async insert({id:t,data:e}){const s=new pt({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return lt.none(s)}static async delete(t){const e=new pt({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await lt.any(e))[0].count>0}}class ht{static async select(t){const e=await mt.select(t);return e?.data||null}static async insert(t){return mt.insert(t)}static async delete(t){return mt.delete(t)}}const yt=s.Router();yt.get("/:id",(async({params:{id:t},url:e},s)=>{try{const e=await ht.select(t);e?s.status(200).json(e):s.status(403).json({error:"No entry found."})}catch(t){at.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),yt.post("/",(async(t,e)=>{const{body:{data:s},url:r}=t;try{const r=u.sha256(Buffer.from(s)).toString("hex");await ht.insert({id:r,data:s});const a=`${t.protocol}://${t.get("host")}/store/${r}`;e.status(201).json({_url:a})}catch(t){at.error(`POST ${r} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),yt.delete("/:id",(async(t,e)=>{e.status(500).json({error:"Deletions are not supported yet."})}));const{PreparedStatement:gt}=f;class wt{static async getBalance(t){const e=new gt({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1',values:[t]});const s=await lt.oneOrNone(e);return parseInt(s?.satoshis,10)||0}static async select(t){const e=new gt({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "address" = $1',values:[t]});return(await lt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByScriptHex(t){const e=new gt({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "scriptPubKey" = $1',values:[t]});return(await lt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByPk(t){const e=new gt({name:`Utxos.selectByPk.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout", "publicKeys" FROM "Utxos" WHERE $1 = ANY ("publicKeys")',values:[t]});return(await lt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}}class ft{static async getBalance(t){return wt.getBalance(t)}static async select(t){return wt.select(t)}static async selectByScriptHex(t){return wt.selectByScriptHex(t)}static async selectByPk(t){return wt.selectByPk(t)}}class Et{static getBalance=async t=>ft.getBalance(t);static select=async t=>ft.select(t);static selectByScriptHex=async t=>ft.selectByScriptHex(t);static selectByPk=async t=>ft.selectByPk(t)}function vt(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}function $t(t){if(!vt(t))throw new Error("Invalid rev")}const{PreparedStatement:St}=f;class Tt{static async query(t){const{publicKey:e,hash:s,limit:r,offset:a,order:n,ids:o,mod:i}=t;const c=parseInt(Z,10);if(r&&parseInt(r||"",10)>c||o&&o.length>c)throw new Error(`Can't fetch more than ${Z} revs.`);if(n&&"ASC"!==n&&"DESC"!==n)throw new Error("Invalid order");let u;u=o?.length?'SELECT "rev", "id", array_position($1, "id") as ord\n        FROM "NonStandard" \n        WHERE true ':'SELECT "rev"\n        FROM "NonStandard"\n        WHERE true ';const d=[];o&&(o.map($t),d.push(o),u+=` AND "id" = ANY ($${d.length})`),s&&(d.push(s),u+=` AND "hash" = $${d.length}`),i&&(d.push(i),u+=` AND "mod" = $${d.length}`),e&&(d.push(e),u+=` AND $${d.length} = ANY ("publicKeys")`),n?(u+=` order by "lastUpdated" ${n}`,o?.length&&(u+=", ord")):o?.length&&(u+=" order by ord"),d.push(r||c),u+=` limit $${d.length}`,a&&(d.push(a),u+=` offset $${d.length}`);const l=new St({name:`NonStandard.query.${Math.random()}`,text:u,values:d});const p=await lt.any(l);const m=p.map((t=>t.rev));if(o?.length&&p.length!==o.length){const t={};return p.forEach((e=>{t[e.id]=e.rev})),o?.map((e=>t[e]??null))??[]}return m}static async insert({id:t,rev:e,publicKeys:s,hash:r,mod:a}){const n=new St({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "hash", "mod") VALUES ($1, $2, $3, $4, $5) ON CONFLICT DO NOTHING',values:[t,e,s,r,a]});await lt.none(n)}static async update({id:t,rev:e,publicKeys:s}){const r=new St({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "rev"=$2, "publicKeys"=$3 WHERE "id" = $1',values:[t,e,s]});return lt.none(r)}static async delete({rev:t}){const e=new St({name:`NonStandard.delete.${Math.random()}`,text:'DELETE FROM "NonStandard" WHERE "rev" = $1',values:[t]});await lt.none(e)}static async getRevsByIds(t){const e=parseInt(Z,10);if(t&&t.length>e)throw new Error(`Can't fetch more than ${Z} revs.`);const s=new St({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1)',values:[[t]]});return lt.any(s)}static async select(t){const e=new St({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "hash", "mod" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return lt.oneOrNone(e)}}class It{static async select(t){return Tt.select(t)}static async query(t){return Tt.query(t)}static async getRevsByIds(t){return Tt.getRevsByIds(t)}static async insert(t){return Tt.insert(t)}static async update(t){return Tt.update(t)}static async delete(t){return Tt.delete({rev:t})}}const{PreparedStatement:Ot}=f;class bt{static async getId(t){const e=new Ot({name:`RevToId.select.${Math.random()}`,text:'SELECT "id" FROM "RevToId" WHERE "rev" = $1',values:[t]});const s=await lt.oneOrNone(e);return s?.id}static async insert(t){const e=new Ot({name:`RevToId.insert.${Math.random()}`,text:'INSERT INTO "RevToId"("rev", "id") VALUES ($1, $2)  ON CONFLICT DO NOTHING',values:[t.rev,t.id]});await lt.none(e)}}class xt{static async getId(t){return bt.getId(t)}static async insert(t){return bt.insert(t)}}class Rt{static add=async t=>{let e;let s;try{({zip:e,outData:s}=t)}catch{return}for(let t=0;t<e.length;t+=1){const[r,a]=e[t];const{exp:n="",_owners:o=[],mod:i=""}=s[t]||{};if(!r&&a)$t(a),await It.insert({id:a,rev:a,publicKeys:o,hash:u.sha256(Buffer.from(n)).toString("hex"),mod:i}),await xt.insert({rev:a,id:a});else if(r&&a){const{id:t,hash:e,mod:s}=await It.select(r)||{};await It.update({id:t,rev:a,publicKeys:o,hash:e,mod:s}),await xt.insert({rev:a,id:t})}else r&&!a&&await It.delete(r)}};static query=async t=>It.query(t);static getRevsByIds=async t=>(await It.getRevsByIds(t)).map((t=>t.rev))}const Nt={protocol:W,user:D,pass:F,host:K,port:parseInt(_,10)};const Mt=new T(Nt);const Pt=I.promisify(T.prototype.createwallet.bind(Mt));const Ct=I.promisify(T.prototype.generateToAddress.bind(Mt));const At=I.promisify(T.prototype.getaddressinfo.bind(Mt));const jt=I.promisify(T.prototype.getBlock.bind(Mt));const Ht=I.promisify(T.prototype.getBlockchainInfo.bind(Mt));const Bt=I.promisify(T.prototype.getBlockHash.bind(Mt));const Lt=I.promisify(T.prototype.getRawTransaction.bind(Mt));const kt=I.promisify(T.prototype.getRawTransaction.bind(Mt));const Dt=I.promisify(T.prototype.getTransaction.bind(Mt));const Ft=I.promisify(T.prototype.getNewAddress.bind(Mt));const Kt={createwallet:Pt,generateToAddress:Ct,getaddressinfo:At,getBlock:jt,getBlockchainInfo:Ht,getBlockHash:Bt,getRawTransaction:Lt,getTransaction:Dt,importaddress:I.promisify(T.prototype.importaddress.bind(Mt)),listunspent:I.promisify(T.prototype.listunspent.bind(Mt)),sendRawTransaction:I.promisify(T.prototype.sendRawTransaction.bind(Mt)),getNewAddress:Ft,sendToAddress:I.promisify(T.prototype.sendToAddress.bind(Mt)),getRawTransactionJSON:kt};class _t{static async getTransaction(t){const{result:e}=await Kt.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>Kt.getRawTransaction(t))))).map((t=>t.result))}static async getRawTransactionsJSON(t){return{txId:(e=(await Kt.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:Math.round(1e8*t.value)}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await Kt.sendRawTransaction(t);if(s)throw at.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>(void 0===(await Kt.getaddressinfo(t)).result.timestamp&&(at.info(`Importing address: ${t}`),await Kt.importaddress(t,!1)),(await Kt.listunspent(0,999999,[t])).result)}class Wt{static get=async t=>_t.getTransaction(t);static getRaw=async t=>_t.getBulkTransactions(t);static getRawJSON=async t=>_t.getRawTransactionsJSON(t);static sendRaw=async t=>_t.sendRawTransaction(t);static getUtxos=async t=>_t.getUtxos(t)}const Ut={protocol:W,user:D,pass:F,host:K,port:parseInt(_,10)};const Yt=new T(Ut);const Gt={};const Vt=JSON.parse(JSON.stringify(T.callspec));Object.keys(Vt).forEach((t=>{Vt[t.toLowerCase()]=Vt[t]}));const Jt={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(T.prototype).forEach((t=>{if(t&&"function"==typeof T.prototype[t]){const e=t.toLowerCase();Gt[t]=I.promisify(T.prototype[t].bind(Yt)),Gt[e]=I.promisify(T.prototype[e].bind(Yt))}}))}catch(t){at.error(`Error occurred while binding RPC methods: ${t.message}`)}const{PreparedStatement:qt}=f;class zt{static async listSentOutputs(t){const e=new qt({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await lt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new qt({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await lt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new qt({name:`Output.listTxs.${Math.random()}`,text:'WITH\n              -- List all txs sent from a given address\n              SENT AS (\n                SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n                FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n                WHERE "Output".address = $1\n                GROUP BY split_part("Input"."spendingInput",\':\',1)\n              ),\n              -- List all tx received from a given address\n              RECEIVED AS (\n                SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n                FROM "Output" \n                WHERE "address" = $1\n                GROUP BY "txId"\n              )\n\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n              SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId";',values:[t]});const s=(await lt.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new qt({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Output" WHERE "address" = $1',values:[t]});return lt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,t.publicKeys]));for(;e.length;){const t=e.splice(0,1e4);const s=[];for(let e=1;e<=t.length;e+=5)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const r=s.join(",");const a=new qt({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "publicKeys") VALUES ${r}  ON CONFLICT DO NOTHING`,values:t});await lt.none(a)}}}class Zt{static async select(t){return zt.select(t)}static async insert(t){return zt.insert(t)}static async listSentOutputs(t){return zt.listSentOutputs(t)}static async listReceivedOutputs(t){return zt.listReceivedOutputs(t)}static async listTxs(t){return zt.listTxs(t)}}class Qt{static insert=async t=>{const e=t.flatMap((t=>t.tx.outs.map(((e,s)=>{const{script:r}=e;let a;let n;try{a=d.fromOutputScript(r,ot(P,C))}catch(t){a=null}try{n=l.p2ms({output:r,network:ot(P,C)}).pubkeys.map((t=>t.toString("hex"))),n.some((t=>t.length>66))&&(n=null)}catch(t){n=null}const o=r.toString("hex");const i=Math.round(e.value);return{address:a,rev:`${t.txId}:${s}`,scriptPubKey:o,satoshis:i,publicKeys:n}}))));return Zt.insert(e)};static listSentOutputs=async t=>Zt.listSentOutputs(t);static listReceivedOutputs=async t=>Zt.listReceivedOutputs(t);static listTxs=async t=>Zt.listTxs(t)}const Xt=t=>new Promise((e=>setTimeout(e,t)));const te=S(o);const ee=i.regtest;const{PreparedStatement:se}=f;class re{static async select(t){const e=new se({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return lt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.outputSpent,t.spendingInput]));for(;e.length;){const t=e.splice(0,1e4);const s=[];for(let e=1;e<=t.length;e+=2)s.push(`($${e}, $${e+1})`);const r=s.join(",");const a=new se({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput") VALUES ${r} ON CONFLICT DO NOTHING`,values:t});await lt.none(a)}}static async count(t){const e=t.map((t=>t.outputSpent));const s=new se({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const r=await lt.oneOrNone(s);return parseInt(r?.count,10)||0}}class ae{static async select(t){return re.select(t)}static async insert(t){return re.insert(t)}}class ne{static getNonCoinbaseRevs=t=>t.filter((t=>!m.isCoinbaseHash(t.input.hash))).map((({input:t,txId:e},s)=>{return{outputSpent:`${r=t.hash,c.reverseBuffer(Buffer.from(r)).toString("hex")}:${t.index}`,spendingInput:`${e}:${s}`};var r}));static insert=async t=>{const e=t.flatMap((t=>t.tx.ins.map((e=>({input:e,txId:t.txId})))));ae.insert(this.getNonCoinbaseRevs(e))}}let oe;try{oe=new O({chain:P,network:C,url:Q})}catch(t){at.error(`Error creating computer, ${t.message}`),process.exit(1)}class ie{static rawTxSubscriber=async t=>{const e=t.toString("hex");if(at.info(`ZMQ message { rawTx:${e} }`),"08"!==e.slice(10,12))try{const t=await oe.txFromHex({hex:e});await Qt.insert([t]),await ne.insert([t]),await Rt.add(t)}catch(t){at.error(`Error parsing transaction ${t.message} ${t.stack}`)}};static checkSyncStatus=async()=>{const t=await v((async()=>{const t=await Kt.getBlockchainInfo();const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const{blocks:s}=t.result;if(at.info(`Zmq. Bitcoind { percentage:${e}%, blocks:${s} }`),parseFloat(t.result.verificationprogress)<=.7)throw new Error("Node not ready yet");return t}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const s=t.result.blocks;at.info(`BCN reaches sync end...at { bitcoind.progress:${e}%, bitcoindSyncedHeight:${s} }`)};static createWallet=async()=>{try{await Kt.createwallet(Y,!1,!1,"",!1,!1)}catch(t){at.error(`Wallet creation failed with error '${t.message}'`)}};static sub=async t=>{try{await this.createWallet(),"regtest"!==C&&await this.checkSyncStatus(),await(async()=>{if("regtest"===C){if(at.info(`Node is starting for chain ${P} and network ${C}, \n\n. Starting Wallet setup.`),"LTC"===P){const{result:t}=await Kt.getBlockchainInfo();const e=t.blocks;if(e<ut){const{result:t}=await Kt.getNewAddress("","legacy");const s=ut-e-1;s&&await Kt.generateToAddress(s,t);const{result:r}=await Kt.getNewAddress("mweb","mweb");await Kt.sendToAddress(r,1),await Kt.generateToAddress(1,t),at.info("MWEB setup is complete")}}if("BTC"===P){const{result:t}=await Kt.getNewAddress("","legacy");await Kt.generateToAddress(200,t),at.info("Wallet setup is complete")}}})(),at.info(`Bitcoin Computer Node ${ct} is ready. MAX_BLOCKCHAIN_HEIGHT: 2538171`);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){at.error(`ZMQ subscription failed with error '${t.message}'`)}}}const{PreparedStatement:ce}=f;class ue{static async select(t){const e=new ce({name:`User.select.${Math.random()}`,text:'SELECT "publicKey", "clientTimestamp" FROM "User" WHERE "publicKey" = $1',values:[t]});const s=await lt.oneOrNone(e);return s?{publicKey:s.publicKey,clientTimestamp:parseInt(s.clientTimestamp,10)||0}:null}static async insert({publicKey:t,clientTimestamp:e}){const s=new ce({name:`User.insert.${Math.random()}`,text:'INSERT INTO "User"("publicKey", "clientTimestamp") VALUES ($1, $2)',values:[t,e]});await lt.none(s)}static async update({publicKey:t,clientTimestamp:e}){const s=new ce({name:`User.update.${Math.random()}`,text:'UPDATE "User" SET "clientTimestamp"=$1 WHERE "publicKey"=$2',values:[e,t]});await lt.none(s)}}class de{static async select(t){return ue.select(t)}static async insert(t){return ue.insert(t)}static async update(t){return ue.update(t)}}const{ec:le}=b;const pe=new le("secp256k1");const me=s();const he=new class{configFile;loaded=!1;load=()=>{try{const t=nt()?"bcn.test.config.json":"bcn.config.json";const e=N(M(import.meta.url));this.configFile=$.readFileSync(R.join(e,"..","..",t)),this.loaded=!0}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void(this.loaded=!0);throw at.error(`Access-list failed with error '${t.message}'`),t}};middleware=({url:t},e,s)=>{if(void 0!==e.locals.authToken)if(this.loaded||(at.warn("Access-list failed with error 'AccessList not loaded.'. Loading now."),this.load()),void 0!==this.configFile)try{const{blacklist:t,whitelist:r}=JSON.parse(this.configFile.toString());if(t&&r)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:a}=e.locals.authToken;if(r&&!r.includes(a)||t&&t.includes(a))return void e.status(403).json({error:`Public key ${a} is not allowed.`});s()}catch(s){at.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s();else s()}};let ye;h(o);try{ye=r.createServer(me)}catch(t){throw at.error(`Starting server failed with error '${t.message}'`),t}if(at.info(`Server listening on port ${A}`),me.use(e()),"dev"!==X){const t=n({windowMs:9e5,max:300,standardHeaders:!0,legacyHeaders:!1});me.use(t)}me.use(t.json({limit:"100mb"})),me.use(t.urlencoded({limit:"100mb",extended:!0})),me.get("/",((t,e)=>e.status(200).send(`\n        <h2>Bitcoin Computer Node</h2>\n        <b>Status</b>: Healthy <br />\n        <b>Version</b>: ${ct} <br />\n        <b>Chain</b>: ${P} <br />\n        <b>Network</b>: ${C}\n    `))),he.loaded&&(me.use((async(t,e,s)=>{try{const r=t.get("Authentication");if(!r){const{method:s,url:r}=t;const a=`Auth failed with error 'no Authentication key provided' ${s} ${t.get("Host")} ${r}`;return at.error(a),void e.status(401).json({error:a})}const a=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(r);const{signature:n,publicKey:o,timestamp:i}=a;if(Date.now()-i>18e4)return void e.status(401).json({error:"Signature is too old."});const c=x.sha256().update(Q+i).digest("hex");if(!pe.keyFromPublic(o,"hex").verify(c,n)){const t="The origin and public key pair doesn't match the signature.";return void e.status(401).json({error:t})}const u=await de.select(o);if(u){if(u.clientTimestamp>=i)return void e.status(401).json({error:"Please use a fresh authentication token."});await de.update({publicKey:o,clientTimestamp:i})}else await de.insert({publicKey:o,clientTimestamp:i});e.locals.authToken=a,s()}catch(t){at.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),me.use(he.middleware));const ge=(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Et.select(e))}catch(t){at.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/sent-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Qt.listSentOutputs(e))}catch(t){at.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/received-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Qt.listReceivedOutputs(e))}catch(t){at.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/wallet/:address/list-txs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Qt.listTxs(e))}catch(t){at.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/non-standard-utxos",(async(t,e)=>{try{const s=new URLSearchParams(t.url.split("?")[1]);const r={mod:s.get("mod"),publicKey:s.get("publicKey"),hash:s.get("hash"),limit:s.get("limit"),order:s.get("order"),offset:s.get("offset"),ids:JSON.parse(s.get("ids"))};const a=await Rt.query(r);e.status(200).json(a)}catch(s){at.error(`GET ${t.url} failed with error '${s.messages}'`),e.status(404).json({error:s.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Et.getBalance(e))}catch(t){at.error(`GET ${e} failed with error '${t.message||t}'`),s.status(404).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(500).json({error:"Missing input txIds."});const e=await Wt.getRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){at.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/post",(async({body:{hex:t},url:e},s)=>{try{if(!t)return void s.status(500).json({error:"Missing input hex."});const e=await Wt.sendRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Error Occured"})}catch(r){at.error(`POST ${e} failed with error '${r.message}\ntxHex: ${t}`),s.status(500).json({error:r.message})}})),t.get("/mine",(async({query:{count:t},url:e},s)=>{try{const{result:e}=await Gt.getnewaddress();if("string"!=typeof t)throw new Error("Please provide appropriate count");return await Gt.generatetoaddress(parseInt(t,10)||1,e),s.status(200).json({success:!0})}catch(t){return at.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/:id/height",(async({params:{id:t},url:e},s)=>{try{let e=t;if("best"===t){const{result:t}=await Gt.getbestblockhash();e=t}const{result:r}=await Gt.getblockheader(e,!0);return s.status(200).json({height:r.height})}catch(t){return at.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/faucet",(async({body:{address:t,value:e},url:s},r)=>{try{const s=parseInt(e,10)/1e8;const{result:a}=await Gt.sendtoaddress(t,s);await Gt.generateToAddress(1,"mvFeNF9DAR7WMuCpBPbKuTtheihLyxzj8i");const{result:n}=await Gt.getrawtransaction(a,1);const o=n.vout.findIndex((t=>1e8*t.value===parseInt(e,10)));return r.status(200).json({txId:a,vout:o,height:-1,satoshis:e})}catch(t){return at.error(`POST ${s} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),t.post("/faucetScript",(async({body:{script:t,value:e},url:s},r)=>{try{const s=te.makeRandom({network:ee});const a=l.p2pkh({pubkey:s.publicKey,network:ee});const{address:n}=a;const o=(await Gt.sendtoaddress(n,2*parseInt(e,10)/1e8,"","")).result;let i;let c=10;for(;!i;)if(i=(await Et.select(n)).filter((t=>t.txId===o))[0],!i){if(c-=1,c<=0)throw new Error("No outputs");await Xt(10)}const u=(await Gt.getrawtransaction(i.txId,1)).result;const d=new p({network:ee});d.addInput({hash:i.txId,index:i.vout,nonWitnessUtxo:Buffer.from(u.hex,"hex")}),d.addOutput({script:Buffer.from(t,"hex"),value:parseInt(e,10)}),d.signInput(0,s),d.finalizeAllInputs();const m=d.extractTransaction();let h;for(await Gt.sendrawtransaction(m.toHex()),c=5;!h;)if(h=(await Et.selectByScriptHex(t)).filter((t=>t.txId===m.getId()))[0],!h){if(c-=1,c<=0)throw new Error("No outputs");await Xt(10)}return r.status(200).json({txId:m.getId(),vout:h.vout,height:-1,satoshis:h.satoshis})}catch(t){return at.error(`POST ${s} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),t.get("/tx/:txId/json",(async({params:{txId:t},url:e},s)=>{try{if(!t)return void s.status(500).json({error:"Missing input txId."});const e=await Wt.getRawJSON(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){at.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(404).json({error:"Missing input object ids."});const e=await Rt.getRevsByIds(t);s.status(200).json(e)}catch(t){at.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/revToId",(async({body:{rev:t},url:e},s)=>{try{if(!vt(t))return void s.status(400).json({error:"Invalid rev id"});const e=await xt.getId(t);e&&s.status(200).json(e),s.status(404).json()}catch(t){at.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!new RegExp(G).test(t.method))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===Vt[t]||null===Vt[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const r=Vt[t].trim().split(" ");if(0===e.trim().length&&0!==Vt[t].trim().length)throw new Error(`Too few params provided. Expected ${r.length} Provided 0`);if(0!==e.trim().length&&0===Vt[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<r.length)throw new Error(`Too few params provided. Expected ${r.length} Provided ${s.length}`);if(s.length>r.length)throw new Error(`Too many params provided. Expected ${r.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>Jt[r[e]](t)))}(t.method,t.params);const r=e.length?await Gt[t.method](...e):await Gt[t.method]();s.status(200).json({result:r})}catch(t){at.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib to the latest version."})})),t})();if("mainnet"===C)throw new Error("Mainnet is currently disabled in your jurisdiction");me.use(`/v1/${P}/${C}`,ge),me.use("/v1/store",yt),ye.listen(A,(()=>{at.info(`\nStarted Bitcoin Computer Node Version ${ct}\nPORT ${A} \nBC_START_HEIGHT 3211111\n`)})).on("error",(t=>{at.error(t.message),process.exit(1)}));const we=new a.Subscriber;we.connect(U),we.subscribe("rawtx"),at.info(`ZMQ Subscriber connected to ${U}`),(async()=>{await(async()=>{await v((()=>lt.connect()),{startingDelay:500})})(),await ie.sub(we)})();
