import*as t from"@bitcoin-computer/tiny-secp256k1";import{bufferUtils as e,networks as s,Transaction as n,crypto as a,address as r,initEccLib as o}from"@bitcoin-computer/nakamotojs";import{backOff as i}from"exponential-backoff";import{Computer as c}from"@bitcoin-computer/lib";import u from"dotenv";import p from"fs";import l from"winston";import d from"winston-daily-rotate-file";import m from"bitcoind-rpc";import y from"util";import v from"pg-promise";import E from"pg-monitor";u.config();const h=process.env.CHAIN;const S=process.env.NETWORK;const{PORT:w}=process.env;const{POSTGRES_USER:O}=process.env;const{POSTGRES_PASSWORD:f}=process.env;const{POSTGRES_DB:g}=process.env;const{POSTGRES_HOST:$}=process.env;const{POSTGRES_PORT:R}=process.env;const{RPC_USER:I}=process.env;const{RPC_PASSWORD:T}=process.env;process.env;const{RPC_HOST:M}=process.env;const{RPC_PORT:b}=process.env;const{RPC_PROTOCOL:N}=process.env;process.env,process.env,process.env;const{DEBUG_MODE:x}=process.env;const{LOG_MAX_FILES:L}=process.env;const{LOG_MAX_SIZE:C}=process.env;const{LOG_ZIP:k}=process.env;const{SHOW_CONSOLE_LOGS:A}=process.env;process.env,process.env,process.env,process.env,process.env,process.env;const B=process.env.QUERY_LIMIT||"1000";const P=process.env.WORKER_ID||"1";const D=process.env.NUM_WORKERS||"1";const H=process.env.BCN_URL||`http://127.0.0.1:${w}`;const U=process.env.BCN_ENV||"dev";u.config();const{version:F}=JSON.parse(p.readFileSync("package.json","utf8"));F||process.env.SERVER_VERSION,parseInt(process.env.MWEB_HEIGHT||"",10),l.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const W=l.format.combine(l.format.colorize(),l.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),l.format.json(),l.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const Y={zippedArchive:"true"===k,maxSize:C,maxFiles:L,dirname:"logs"};const _=[];"dev"===A&&_.push(new l.transports.Console({format:l.format.combine(l.format.colorize(),l.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),l.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))}));const K=parseInt(x,10);K>=0&&_.push(new d({filename:`error${P}-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"error",...Y})),K>=1&&_.push(new d({filename:`warn${P}-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"warn",...Y})),K>=2&&_.push(new d({filename:`info${P}-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"info",...Y})),K>=3&&_.push(new d({filename:`http${P}-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"http",...Y})),K>=4&&_.push(new d({filename:`debug${P}-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"debug",...Y}));const G=l.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:W,transports:_,exceptionHandlers:[new l.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new l.transports.File({filename:"logs/rejections.log"})]});const V=new m({protocol:N,user:I,pass:T,host:M,port:parseInt(b,10)});const j=y.promisify(m.prototype.createwallet.bind(V));const q=y.promisify(m.prototype.generateToAddress.bind(V));const J=y.promisify(m.prototype.getaddressinfo.bind(V));const z=y.promisify(m.prototype.getBlock.bind(V));const X=y.promisify(m.prototype.getBlockchainInfo.bind(V));const Z=y.promisify(m.prototype.getBlockHash.bind(V));const Q=y.promisify(m.prototype.getRawTransaction.bind(V));const tt=y.promisify(m.prototype.getRawTransaction.bind(V));const et=y.promisify(m.prototype.getTransaction.bind(V));const st=y.promisify(m.prototype.getNewAddress.bind(V));const nt={createwallet:j,generateToAddress:q,getaddressinfo:J,getBlock:z,getBlockchainInfo:X,getBlockHash:Z,getRawTransaction:Q,getTransaction:et,importaddress:y.promisify(m.prototype.importaddress.bind(V)),listunspent:y.promisify(m.prototype.listunspent.bind(V)),sendRawTransaction:y.promisify(m.prototype.sendRawTransaction.bind(V)),getNewAddress:st,sendToAddress:y.promisify(m.prototype.sendToAddress.bind(V)),getRawTransactionJSON:tt};const at=(t,e)=>{const s=[];for(let n=0;n<t.length;n+=e){const a=Math.min(n+e,t.length);const r=t.slice(n,a);s.push(r)}return s};const rt=t=>{const e=[];for(let s=1;s<=t;s+=2){const t=`($${s},$${s+1})`;e.push(t)}return e.join(",")};const ot=t=>{const e=[];for(let s=1;s<=t;s+=9){const t=`($${s},$${s+1},$${s+2},$${s+3},$${s+4},$${s+5},$${s+6},$${s+7},$${s+8})`;e.push(t)}return e.join(",")};const it=t=>{try{return t()}catch{return null}};const ct={error:(t,e)=>{if(e.cn){const{host:s,port:n,database:a,user:r,password:o}=e.cn;G.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${n}, database:${a}, user:${r}, password: ${o}`)}},noWarnings:!0};"dev"===U&&parseInt(x,10)>0&&(E.isAttached()?E.detach():(E.attach(ct),E.setTheme("matrix")));const ut=v(ct)({host:$,port:parseInt(R,10),database:g,user:O,password:f,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:pt}=v;class lt{static async select(t){const e=new pt({name:`SyncStatus.select.${Math.random()}`,text:'SELECT "blockToSync", "workerId" FROM "SyncStatus" WHERE "workerId" = $1',values:[t]});return ut.oneOrNone(e)}static async update({blockToSync:t,workerId:e}){const s=new pt({name:`SyncStatus.update.${Math.random()}`,text:'UPDATE "SyncStatus" SET "blockToSync" = $1 WHERE "workerId" = $2',values:[t,e]});await ut.any(s)}static async count(){const t=new pt({name:`SyncStatus.count.${Math.random()}`,text:'SELECT COUNT(*) FROM "SyncStatus"'});const e=await ut.oneOrNone(t);return parseInt(e?.count,10)||0}static async min(){const t=new pt({name:`SyncStatus.min.${Math.random()}`,text:'SELECT MIN("blockToSync") FROM "SyncStatus"'});const e=await ut.oneOrNone(t);return parseInt(e?.min,10)||0}static async delete(){const t=new pt({name:`SyncStatus.delete.${Math.random()}`,text:'DELETE FROM "SyncStatus"'});await ut.any(t)}static async insertBatch(t){const e=[];for(let s=1;s<=t.length;s+=2)e.push(`($${s}, $${s+1})`);const s=e.join(",");const n=new pt({name:`SyncStatus.reorg.${Math.random()}`,text:`INSERT INTO "SyncStatus"("workerId", "blockToSync") VALUES ${s}`,values:t});await ut.any(n)}}class dt{static async select(t){return lt.select(t)}static async update(t){await lt.update(t)}static async count(){return lt.count()}static async insertBatch(t){await lt.insertBatch(t)}static async min(){return lt.min()}static async delete(){await lt.delete()}}class mt{static update=async t=>dt.update(t);static select=async t=>dt.select(t);static setup=async t=>{if(await dt.count()===t)return void G.info(`All ${t} workers have already registered.`);const e=[];let s=Math.max(1,await dt.min());for(let n=1;n<=t;n+=1,s+=1)e.push(n,s);G.info(`Reorging sync status for ${t} workers...${e}`),await dt.delete(),await dt.insertBatch(e)};static waitUntilSetup=async t=>{G.info(`WorkerId ${P} waiting for master worker to reorg up to ${t} workers...`),await i((async()=>{const e=await dt.count();if(e===t)return!0;throw G.info(`WorkerId ${P} waiting until setup done. Actual ${e}, numWorkers ${t}`),new Error("Not all workers have reorged")}),{startingDelay:500})}}const{PreparedStatement:yt}=v;class vt{static async select(t){const e=new yt({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return ut.any(e)}static async insert(t){await Promise.all(at(t,5e3).map((t=>{const e=t.flatMap((({outputSpent:t,spendingInput:e})=>[t,e]));return ut.none(new yt({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput") VALUES ${rt(e.length)} ON CONFLICT DO NOTHING`,values:e}))})))}static async count(t){const e=t.map((t=>t.outputSpent));const s=new yt({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const n=await ut.oneOrNone(s);return parseInt(n?.count,10)||0}}class Et{static async select(t){return vt.select(t)}static async insert(t){return vt.insert(t)}}class ht{static insert=async t=>{const s=t.flatMap((t=>t.tx.ins.map((e=>({input:e,txId:t.txId}))))).filter((({input:t})=>!n.isCoinbaseHash(t.hash))).map((({input:t,txId:s},n)=>{return{outputSpent:`${a=t.hash,e.reverseBuffer(Buffer.from(a)).toString("hex")}:${t.index}`,spendingInput:`${s}:${n}`};var a}));Et.insert(s)}}function St(t){if(!function(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}(t))throw new Error("Invalid rev")}const{PreparedStatement:wt}=v;class Ot{static async listSentOutputs(t){const e=new wt({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await ut.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new wt({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await ut.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new wt({name:`Output.listTxs.${Math.random()}`,text:'WITH\n              -- List all txs sent from a given address\n              SENT AS (\n                SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n                FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n                WHERE "Output".address = $1\n                GROUP BY split_part("Input"."spendingInput",\':\',1)\n              ),\n              -- List all tx received from a given address\n              RECEIVED AS (\n                SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n                FROM "Output" \n                WHERE "address" = $1\n                GROUP BY "txId"\n              )\n\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n              SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId";',values:[t]});const s=(await ut.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new wt({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", "publicKeys", "hash", "mod", "isTbcOutput", "previous" FROM "Output" WHERE "address" = $1',values:[t]});return ut.any(e)}static async insert(t){await Promise.all(at(t,1111).map((t=>{const e=t.flatMap((({rev:t,address:e,satoshis:s,scriptPubKey:n,isTbcOutput:a,publicKeys:r,mod:o,previous:i,hash:c})=>[t,e,s,n,a,r,o,i,c]));return ut.none(new wt({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "isTbcOutput", "publicKeys", "mod", "previous", "hash") VALUES ${ot(e.length)} ON CONFLICT DO NOTHING`,values:e}))})))}static async getIdByRev(t){const e=new wt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await ut.any(e)).filter((t=>null===t.previous));return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map((t=>this.getIdByRev(t))))}static async getLatestRev(t){const e=new wt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await ut.any(e);const n=Object.fromEntries(s.map((t=>[t.previous,t.rev])));let a=t;for(;n[a];)a=n[a];return a}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new wt({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await ut.any(e)).map((t=>t.rev))}static sqlSuffix(t,e,s){let n="";return s&&(n+=` order by "timestamp" ${s}`),n+=` limit ${t||B}`,e&&(n+=` offset ${e}`),n}static async getRevsByPublicKey(t){const e=new wt({name:`Output.getRevsByPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys")',values:[t]});return(await ut.any(e)).map((t=>t.rev))}static async getUnspentRevsByMod(t,e,s,n){const a=await this.getIdsByMod(t);const r=await this.getLatestRevs(a);const o=new wt({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,n)}`,values:[r]});return(await ut.any(o)).map((t=>t.rev))}static async getUnspentRevsByPublicKey(t,e,s,n){const a=new wt({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys") AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,n)}`,values:[t]});return(await ut.any(a)).map((t=>t.rev))}static async getUnspentRevsByModAndPublicKey(t,e,s,n,a){const r=await this.getUnspentRevsByPublicKey(e,s,n,a);const o=await this.getIdsByRevs(r);const i=new wt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const c=(await ut.any(i)).map((t=>t.rev));const u=await this.getLatestRevs(c);const p=new wt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,n,a)}`,values:[u]});return(await ut.any(p)).map((t=>t.rev))}static async query(t){const{publicKey:e,limit:s,offset:n,ids:a,mod:r,order:o}=t;const i=parseInt(B||"",10);if(s&&parseInt(s||"",10)>i||a&&a.length>i)throw new Error(`Can't fetch more than ${B} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return a?.length?(a.map(St),this.getLatestRevs(a)):r&&!e?this.getUnspentRevsByMod(r,s,n,o):!r&&e?this.getUnspentRevsByPublicKey(e,s,n,o):r&&e?this.getUnspentRevsByModAndPublicKey(r,e,s,n,o):[]}}class ft{static async select(t){return Ot.select(t)}static async insert(t){return Ot.insert(t)}static async listSentOutputs(t){return Ot.listSentOutputs(t)}static async listReceivedOutputs(t){return Ot.listReceivedOutputs(t)}static async listTxs(t){return Ot.listTxs(t)}static async getLatestRev(t){return Ot.getLatestRev(t)}static async query(t){return Ot.query(t)}}class gt{static insert=async t=>{const e=t.flatMap((t=>{const{zip:e,outData:n}=t;return t.tx.outs.map((({script:o,value:i},c)=>{const u=c<e.length;const p=n[c];return{rev:`${t.txId}:${c}`,address:it((()=>r.fromOutputScript(o,function(t=h,e=S){switch(t){case"BTC":switch(e){case"mainnet":return s.bitcoin;case"testnet":return s.testnet;case"regtest":return s.regtest;default:throw new Error(`Invalid network ${e}`)}case"LTC":switch(e){case"mainnet":return s.litecoin;case"testnet":return s.litecointestnet;case"regtest":return s.litecoinregtest;default:throw new Error(`Invalid network ${e}`)}default:throw new Error(`Invalid chain ${t}`)}}(h,S)))),satoshis:Math.round(i),scriptPubKey:o.toString("hex"),isTbcOutput:u,publicKeys:u?p._owners:[],mod:u?p.mod:"",previous:u?e[c][0]:null,hash:u?a.sha256(Buffer.from(p.exp||"")).toString("hex"):null}}))}));return ft.insert(e)};static listSentOutputs=async t=>ft.listSentOutputs(t);static listReceivedOutputs=async t=>ft.listReceivedOutputs(t);static listTxs=async t=>ft.listTxs(t);static getLatestRev=async t=>ft.getLatestRev(t);static query=async t=>ft.query(t)}class $t{static waitForBlockHash=async t=>(await i((async()=>{let e;try{e=await nt.getBlockHash(t)}catch(e){throw G.info(`Sync workerId ${P}: waiting for block ${t} ...`),e}return e}),{startingDelay:3e4,timeMultiple:1,numOfAttempts:720})).result;static syncBlock=async(t,e="LTC")=>{const s=await $t.waitForBlockHash(t);const{result:n}=await nt.getBlock(s,2);const{tx:a}=n;let r=a;"LTC"===e&&(r=a.filter((t=>"08"!==t.hex.slice(10,12))));const o=`Backfilling progress ${t} Backfilling ${r.length} txs `;"LTC"===e&&o.concat(`(${a.length-r.length} mweb tx's filtered)...`),G.info(o);const i=r.map((e=>{try{return c.txFromHex({hex:e.hex})}catch(s){s instanceof Error&&G.error(`Failed to parse transaction in block ${t}\n            error message: ${s.message}\n            transaction: ${JSON.stringify(e)}`)}return null})).filter((t=>null!==t));try{await gt.insert(i),await ht.insert(i)}catch(e){G.error(`Processing block ${t} failed with error '${e.message}'`)}};static sync=async(t,e)=>{for(;;){try{await this.syncBlock(e,h)}catch(t){G.error(`Syncing block num ${e} failed with error '${t.message}'`)}e+=parseInt(D,10),await mt.update({blockToSync:e,workerId:t})}}}o(t),function(){try{const t=`Synchronizing { url: ${H}, chain:${h} network:${S} numWorkers: ${D} workerId: ${P}}`;G.info(t),"regtest"!==S&&(async()=>{await(async()=>{await i((()=>ut.connect()),{startingDelay:500})})(),G.info(`WorkerId ${P} connected to the database successfully. Setting up syncStatus table...`),"1"===P?await mt.setup(parseInt(D,10)):await mt.waitUntilSetup(parseInt(D,10));const t=await mt.select(parseInt(P,10));G.info(`WorkerId ${t.workerId} starting sync on blockToSync: ${t.blockToSync} - numWorkers: ${D}`),await $t.sync(t.workerId,t.blockToSync)})()}catch(t){G.error(`Synchronizing failed with error '${t.message}'`)}}();
