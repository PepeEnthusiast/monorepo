import*as t from"@bitcoin-computer/tiny-secp256k1";import{bufferUtils as e,networks as s,Transaction as n,crypto as a,address as r,initEccLib as o}from"@bitcoin-computer/nakamotojs";import{backOff as i}from"exponential-backoff";import{Computer as c}from"@bitcoin-computer/lib";import u from"dotenv";import p from"fs";import l from"winston";import d from"winston-daily-rotate-file";import m from"bitcoind-rpc";import y from"util";import v from"pg-promise";import h from"pg-monitor";u.config();const E=process.env.CHAIN;const S=process.env.NETWORK;const{PORT:w}=process.env;const{POSTGRES_USER:f}=process.env;const{POSTGRES_PASSWORD:O}=process.env;const{POSTGRES_DB:R}=process.env;const{POSTGRES_HOST:$}=process.env;const{POSTGRES_PORT:g}=process.env;const{RPC_USER:I}=process.env;const{RPC_PASSWORD:T}=process.env;process.env;const{RPC_HOST:M}=process.env;const{RPC_PORT:b}=process.env;const{RPC_PROTOCOL:x}=process.env;process.env,process.env,process.env;const{DEBUG_MODE:N}=process.env;const{LOG_MAX_FILES:L}=process.env;const{LOG_MAX_SIZE:C}=process.env;const{LOG_ZIP:k}=process.env;process.env;const B=process.env.QUERY_LIMIT||"1000";const A=process.env.WORKER_ID||"1";const P=process.env.NUM_WORKERS||"1";const D=process.env.BCN_URL||`http://127.0.0.1:${w}`;const H=process.env.BCN_ENV||"dev";u.config();const{version:F}=JSON.parse(p.readFileSync("package.json","utf8"));F||process.env.SERVER_VERSION,parseInt(process.env.MWEB_HEIGHT||"",10),l.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const U=l.format.combine(l.format.colorize(),l.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),l.format.json(),l.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const Y={zippedArchive:!!k,maxSize:C,maxFiles:L,dirname:"logs"};const W=[];"dev"===H&&W.push(new l.transports.Console({format:l.format.combine(l.format.colorize(),l.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),l.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))}));const _=parseInt(N,10);_>=0&&W.push(new d({filename:`error${A}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"error",...Y})),_>=1&&W.push(new d({filename:`warn${A}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"warn",...Y})),_>=2&&W.push(new d({filename:`info${A}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"info",...Y})),_>=3&&W.push(new d({filename:`http${A}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"http",...Y})),_>=4&&W.push(new d({filename:`debug${A}%-%DATE%.log`,datePattern:"YYYY-MM-DD",level:"debug",...Y}));const K=l.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:U,transports:W,exceptionHandlers:[new l.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new l.transports.File({filename:"logs/rejections.log"})]});const G=new m({protocol:x,user:I,pass:T,host:M,port:parseInt(b,10)});const V=y.promisify(m.prototype.createwallet.bind(G));const j=y.promisify(m.prototype.generateToAddress.bind(G));const q=y.promisify(m.prototype.getaddressinfo.bind(G));const z=y.promisify(m.prototype.getBlock.bind(G));const J=y.promisify(m.prototype.getBlockchainInfo.bind(G));const X=y.promisify(m.prototype.getBlockHash.bind(G));const Z=y.promisify(m.prototype.getRawTransaction.bind(G));const Q=y.promisify(m.prototype.getRawTransaction.bind(G));const tt=y.promisify(m.prototype.getTransaction.bind(G));const et=y.promisify(m.prototype.getNewAddress.bind(G));const st={createwallet:V,generateToAddress:j,getaddressinfo:q,getBlock:z,getBlockchainInfo:J,getBlockHash:X,getRawTransaction:Z,getTransaction:tt,importaddress:y.promisify(m.prototype.importaddress.bind(G)),listunspent:y.promisify(m.prototype.listunspent.bind(G)),sendRawTransaction:y.promisify(m.prototype.sendRawTransaction.bind(G)),getNewAddress:et,sendToAddress:y.promisify(m.prototype.sendToAddress.bind(G)),getRawTransactionJSON:Q};const nt={error:(t,e)=>{if(e.cn){const{host:s,port:n,database:a,user:r,password:o}=e.cn;K.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${n}, database:${a}, user:${r}, password: ${o}`)}},noWarnings:!0};"dev"===H&&parseInt(N,10)>0&&(h.isAttached()?h.detach():(h.attach(nt),h.setTheme("matrix")));const at=v(nt)({host:$,port:parseInt(g,10),database:R,user:f,password:O,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:rt}=v;class ot{static async select(t){const e=new rt({name:`SyncStatus.select.${Math.random()}`,text:'SELECT "blockToSync", "workerId" FROM "SyncStatus" WHERE "workerId" = $1',values:[t]});return at.oneOrNone(e)}static async update({blockToSync:t,workerId:e}){const s=new rt({name:`SyncStatus.update.${Math.random()}`,text:'UPDATE "SyncStatus" SET "blockToSync" = $1 WHERE "workerId" = $2',values:[t,e]});await at.any(s)}static async count(){const t=new rt({name:`SyncStatus.count.${Math.random()}`,text:'SELECT COUNT(*) FROM "SyncStatus"'});const e=await at.oneOrNone(t);return parseInt(e?.count,10)||0}static async min(){const t=new rt({name:`SyncStatus.min.${Math.random()}`,text:'SELECT MIN("blockToSync") FROM "SyncStatus"'});const e=await at.oneOrNone(t);return parseInt(e?.min,10)||0}static async delete(){const t=new rt({name:`SyncStatus.delete.${Math.random()}`,text:'DELETE FROM "SyncStatus"'});await at.any(t)}static async insertBatch(t){const e=[];for(let s=1;s<=t.length;s+=2)e.push(`($${s}, $${s+1})`);const s=e.join(",");const n=new rt({name:`SyncStatus.reorg.${Math.random()}`,text:`INSERT INTO "SyncStatus"("workerId", "blockToSync") VALUES ${s}`,values:t});await at.any(n)}}class it{static async select(t){return ot.select(t)}static async update(t){await ot.update(t)}static async count(){return ot.count()}static async insertBatch(t){await ot.insertBatch(t)}static async min(){return ot.min()}static async delete(){await ot.delete()}}class ct{static update=async t=>it.update(t);static select=async t=>it.select(t);static setup=async t=>{if(await it.count()===t)return;const e=[];let s=Math.max(1,await it.min());for(let n=1;n<=t;n+=1,s+=1)e.push(n,s);await it.delete(),await it.insertBatch(e)};static waitUntilSetup=async t=>{i((async()=>{if(await it.count()===t)return!0;throw new Error("Not all workers have reorged")}),{startingDelay:500})}}const{PreparedStatement:ut}=v;class pt{static async select(t){const e=new ut({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return at.any(e)}static async insert(t){const e=t.flatMap((t=>[t.outputSpent,t.spendingInput]));for(;e.length;){const t=e.splice(0,1e4);const s=[];for(let e=1;e<=t.length;e+=2)s.push(`($${e}, $${e+1})`);const n=s.join(",");const a=new ut({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput") VALUES ${n} ON CONFLICT DO NOTHING`,values:t});await at.none(a)}}static async count(t){const e=t.map((t=>t.outputSpent));const s=new ut({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const n=await at.oneOrNone(s);return parseInt(n?.count,10)||0}}class lt{static async select(t){return pt.select(t)}static async insert(t){return pt.insert(t)}}class dt{static getNonCoinbaseRevs=t=>t.filter((t=>!n.isCoinbaseHash(t.input.hash))).map((({input:t,txId:s},n)=>{return{outputSpent:`${a=t.hash,e.reverseBuffer(Buffer.from(a)).toString("hex")}:${t.index}`,spendingInput:`${s}:${n}`};var a}));static insert=async t=>{const e=t.flatMap((t=>t.tx.ins.map((e=>({input:e,txId:t.txId})))));lt.insert(this.getNonCoinbaseRevs(e))}}function mt(t){if(!function(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}(t))throw new Error("Invalid rev")}const{PreparedStatement:yt}=v;class vt{static async listSentOutputs(t){const e=new yt({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await at.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new yt({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await at.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new yt({name:`Output.listTxs.${Math.random()}`,text:'WITH\n              -- List all txs sent from a given address\n              SENT AS (\n                SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n                FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n                WHERE "Output".address = $1\n                GROUP BY split_part("Input"."spendingInput",\':\',1)\n              ),\n              -- List all tx received from a given address\n              RECEIVED AS (\n                SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n                FROM "Output" \n                WHERE "address" = $1\n                GROUP BY "txId"\n              )\n\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n              SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId";',values:[t]});const s=(await at.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new yt({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", "publicKeys", "hash", "mod", "isTbcOutput", "previous" FROM "Output" WHERE "address" = $1',values:[t]});return at.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,t.publicKeys,t.hash,t.mod,t.isTbcOutput,t.previous]));for(;e.length;){const t=e.splice(0,1e4);const s=[];for(let e=1;e<=t.length;e+=9)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4}, $${e+5}, $${e+6}, $${e+7}, $${e+8})`);const n=s.join(",");const a=new yt({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "publicKeys", "hash", "mod", "isTbcOutput", "previous") VALUES ${n}  ON CONFLICT DO NOTHING`,values:t});await at.none(a)}}static async getIdByRev(t){const e=new yt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await at.any(e)).filter((t=>null===t.previous));return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map((t=>this.getIdByRev(t))))}static async getLatestRev(t){const e=new yt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await at.any(e);const n=Object.fromEntries(s.map((t=>[t.previous,t.rev])));let a=t;for(;n[a];)a=n[a];return a}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new yt({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await at.any(e)).map((t=>t.rev))}static sqlSuffix(t,e,s){let n="";return s&&(n+=` order by "timestamp" ${s}`),n+=` limit ${t||B}`,e&&(n+=` offset ${e}`),n}static async getRevsByPublicKey(t){const e=new yt({name:`Output.getRevsByPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys")',values:[t]});return(await at.any(e)).map((t=>t.rev))}static async getUnspentRevsByMod(t,e,s,n){const a=await this.getIdsByMod(t);const r=await this.getLatestRevs(a);const o=new yt({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,n)}`,values:[r]});return(await at.any(o)).map((t=>t.rev))}static async getUnspentRevsByPublicKey(t,e,s,n){const a=new yt({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys") AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,n)}`,values:[t]});return(await at.any(a)).map((t=>t.rev))}static async getUnspentRevsByModAndPublicKey(t,e,s,n,a){const r=await this.getUnspentRevsByPublicKey(e,s,n,a);const o=await this.getIdsByRevs(r);const i=new yt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const c=(await at.any(i)).map((t=>t.rev));const u=await this.getLatestRevs(c);const p=new yt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,n,a)}`,values:[u]});return(await at.any(p)).map((t=>t.rev))}static async query(t){const{publicKey:e,limit:s,offset:n,ids:a,mod:r,order:o}=t;const i=parseInt(B||"",10);if(s&&parseInt(s||"",10)>i||a&&a.length>i)throw new Error(`Can't fetch more than ${B} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return a?.length?(a.map(mt),this.getLatestRevs(a)):r&&!e?this.getUnspentRevsByMod(r,s,n,o):!r&&e?this.getUnspentRevsByPublicKey(e,s,n,o):r&&e?this.getUnspentRevsByModAndPublicKey(r,e,s,n,o):[]}}class ht{static async select(t){return vt.select(t)}static async insert(t){return vt.insert(t)}static async listSentOutputs(t){return vt.listSentOutputs(t)}static async listReceivedOutputs(t){return vt.listReceivedOutputs(t)}static async listTxs(t){return vt.listTxs(t)}static async getLatestRev(t){return vt.getLatestRev(t)}static async query(t){return vt.query(t)}}class Et{static insert=async t=>{const e=t.flatMap((t=>{let e=[];let n=[];try{({zip:e,outData:n}=t)}catch(t){}return t.tx.outs.map(((o,i)=>{const{script:c}=o;let u=null;let p=null;let l=!1;let d=null;let m="";let y=[];let v="";if(i<e.length){const[s,r]=e[i];p=s,l=!0,v=n[i]?.exp||"",m=n[i]?.mod||"",d=a.sha256(Buffer.from(v)).toString("hex"),y=n[i]?._owners||[],r!==`${t.txId}:${i}`&&K.error(`Error on output insertions outRev is not matching txId and output number: ${e[i].outRev} !== ${t.txId}:${i}`)}try{u=r.fromOutputScript(c,function(t=E,e=S){switch(t){case"BTC":switch(e){case"mainnet":return s.bitcoin;case"testnet":return s.testnet;case"regtest":return s.regtest;default:throw new Error(`Invalid network ${e}`)}case"LTC":switch(e){case"mainnet":return s.litecoin;case"testnet":return s.litecointestnet;case"regtest":return s.litecoinregtest;default:throw new Error(`Invalid network ${e}`)}default:throw new Error(`Invalid chain ${e}`)}}(E,S))}catch(t){}const h=c.toString("hex");const w=Math.round(o.value);return{address:u,rev:`${t.txId}:${i}`,scriptPubKey:h,satoshis:w,publicKeys:y,hash:d,previous:p,mod:m,isTbcOutput:l}}))}));return ht.insert(e)};static listSentOutputs=async t=>ht.listSentOutputs(t);static listReceivedOutputs=async t=>ht.listReceivedOutputs(t);static listTxs=async t=>ht.listTxs(t);static getLatestRev=async t=>ht.getLatestRev(t);static query=async t=>ht.query(t)}const St=new c({chain:E,network:S,url:D});class wt{static waitForBlockHash=async t=>(await i((async()=>{let e;try{e=await st.getBlockHash(t)}catch(e){throw K.info(`Sync workerId ${A}: waiting for block ${t} ...`),e}return e}),{startingDelay:3e4,timeMultiple:1,numOfAttempts:720})).result;static syncBlock=async(t,e="LTC")=>{const s=await wt.waitForBlockHash(t);const{result:n}=await st.getBlock(s,2);const{tx:a}=n;let r=a;"LTC"===e&&(r=a.filter((t=>"08"!==t.hex.slice(10,12))));const o=`Backfilling progress ${t} Backfilling ${r.length} txs `;"LTC"===e&&o.concat(`(${a.length-r.length} mweb tx's filtered)...`),K.info(o);const i=await Promise.allSettled(r.map((t=>St.txFromHex({hex:t.hex}))));const c=i.filter((t=>"fulfilled"===t.status)).map((t=>t.value));const u=i.filter((t=>"rejected"===t.status)).map((t=>t.reason));var p,l;u.length&&K.error(`Failed to parse ${u.length} transactions of block num ${t}: ${u.map((t=>t)).join(", ")}\n        Failed txs: ${p=r.map((t=>t.id)),l=c.map((t=>t.tx.getId())),p.filter((t=>-1===l.indexOf(t)))}`),await this.syncTxs(c,t)};static sync=async(t,e)=>{for(;;){try{await this.syncBlock(e,E)}catch(t){K.error(`Syncing block num ${e} failed with error '${t.message}'`)}e+=parseInt(P,10),await ct.update({blockToSync:e,workerId:t})}};static syncTxs=async(t,e)=>{try{await Et.insert(t),await dt.insert(t)}catch(t){K.error(`Processing block ${e} failed with error '${t.message}'`)}}}o(t),function(){try{const t=`Synchronizing { url: ${D}, chain:${E} network:${S} numWorkers: ${P} workerId: ${A}}`;K.info(t),"regtest"!==S&&(async()=>{await(async()=>{await i((()=>at.connect()),{startingDelay:500})})(),K.info(`Worker ${A} connected to the database successfully. Setting up syncStatus table...`),"1"===A?await ct.setup(parseInt(P,10)):await ct.waitUntilSetup(parseInt(P,10));const t=await ct.select(parseInt(A,10));K.info(`WorkerId ${t.workerId} starting sync on blockToSync: ${t.blockToSync} - numWorkers: ${P}`),await wt.sync(t.workerId,t.blockToSync)})()}catch(t){K.error(`Synchronizing failed with error '${t.message}'`)}}();
