import{backOff as t}from"exponential-backoff";import{Computer as e}from"@bitcoin-computer/lib";import s from"dotenv";import n from"fs";import{networks as a,bufferUtils as r,crypto as o,Transaction as i,address as c,payments as d}from"@bitcoin-computer/nakamotojs-lib";import p from"winston";import u from"winston-daily-rotate-file";import l from"bitcoind-rpc";import m from"util";import y from"pg-promise";import h from"pg-monitor";s.config();const E=JSON.parse(n.readFileSync("package.json","utf8"));function S(t,e){switch(t){case"BTC":return"mainnet"===e?a.bitcoin:a.testnet;case"LTC":return"mainnet"===e?a.litecoin:a.litecoinregtest;default:throw new Error("We currently only support BTC and LTC, support for other currencies will be added soon.")}}const{PORT:g,ZMQ_URL:f,CHAIN:w,NETWORK:I,BCN_ENV:$,BCN_URL:R,DEBUG_MODE:O,POSTGRES_USER:T,POSTGRES_PASSWORD:N,POSTGRES_DB:v,POSTGRES_HOST:M,POSTGRES_PORT:x,RPC_PROTOCOL:C,RPC_USER:b,RPC_PASSWORD:H,RPC_HOST:A,RPC_PORT:_,SERVER_VERSION:D,DEFAULT_WALLET:L,SYNC_INTERVAL_CHECK:P,POSTGRES_MAX_PARAM_NUM:k,DB_CONNECTION_RETRY_TIME:Y,SIGNATURE_FRESHNESS_MINUTES:B,ALLOWED_RPC_METHODS:F,NODE_MAX_PROGRESS:W,SYNC_MAX_PROGRESS:U,MAX_BLOCKCHAIN_HEIGHT:G,MWEB_HEIGHT:K,BC_START_HEIGHT:V,WORKER_ID:j,NUM_WORKERS:z,SYNC_NON_STANDARD:q,ZMQ_WAIT_PERCENTAGE:X,QUERY_LIMIT:J,LOG_MAX_FILE_SIZE:Z,LOG_MAX_FILE_NUM:Q,LOG_ZIP:tt,RPC_URL:et,RPC_BATCHSIZE:st,RPC_CONCURRENT:nt,INDEXDB:at,KEYDB:rt}=process.env;const ot=parseInt(g,10)||"1031";const it=w||"LTC";const ct=I||"regtest";const dt=$||"dev";const pt=R||`http://127.0.0.1:${ot}`;const ut=parseInt(O,10)||1;const lt=T||"bcn";const mt=N||"bcn";const yt=v||"bcn";const ht=M||"127.0.0.1";const Et=parseInt(x,10)||"5432";const St=C||"http";const gt=b||"bcn-admin";const ft=H||"kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=";const wt=A||"node";const It=parseInt(_,10)||19332;E.version;const $t=parseInt(k,10)||1e4;const Rt=parseInt(Y,10)||500;!F||F.split(",").map((t=>new RegExp(t)));const Ot=parseInt(V||"",10)||25e5;const Tt=parseInt(j,10)||1;const Nt=parseInt(z||"",10)||1;const vt="true"===q||!1;const Mt=parseInt(J||"",10)||100;const xt=Z||"20m";const Ct=Q||"14d";const bt=!!tt;p.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const Ht=p.format.combine(p.format.colorize(),p.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),p.format.json(),p.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const At={zippedArchive:bt,maxSize:xt,maxFiles:Ct,dirname:"logs"};const _t=[];"dev"===dt&&_t.push(new p.transports.Console({format:p.format.combine(p.format.colorize(),p.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),p.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))})),ut>=0&&_t.push(new u({filename:"error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...At})),ut>=1&&_t.push(new u({filename:"warn-%DATE%.log",datePattern:"YYYY-MM-DD",level:"warn",...At})),ut>=2&&_t.push(new u({filename:"info-%DATE%.log",datePattern:"YYYY-MM-DD",level:"info",...At})),ut>=3&&_t.push(new u({filename:"http-%DATE%.log",datePattern:"YYYY-MM-DD",level:"http",...At})),ut>=4&&_t.push(new u({filename:"debug-%DATE%.log",datePattern:"YYYY-MM-DD",level:"debug",...At})),_t.push(new u({filename:"logs-%DATE%.log",datePattern:"YYYY-MM-DD"}));const Dt=p.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:Ht,transports:_t,exceptionHandlers:[new p.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new p.transports.File({filename:"logs/rejections.log"})]});const Lt=new l({protocol:St,user:gt,pass:ft,host:wt,port:It});const Pt=m.promisify(l.prototype.createwallet.bind(Lt));const kt=m.promisify(l.prototype.generateToAddress.bind(Lt));const Yt=m.promisify(l.prototype.getaddressinfo.bind(Lt));const Bt=m.promisify(l.prototype.getBlock.bind(Lt));const Ft=m.promisify(l.prototype.getBlockchainInfo.bind(Lt));const Wt=m.promisify(l.prototype.getBlockHash.bind(Lt));const Ut=m.promisify(l.prototype.getRawTransaction.bind(Lt));const Gt=m.promisify(l.prototype.getRawTransaction.bind(Lt));const Kt=m.promisify(l.prototype.getTransaction.bind(Lt));const Vt=m.promisify(l.prototype.getNewAddress.bind(Lt));const jt={createwallet:Pt,generateToAddress:kt,getaddressinfo:Yt,getBlock:Bt,getBlockchainInfo:Ft,getBlockHash:Wt,getRawTransaction:Ut,getTransaction:Kt,importaddress:m.promisify(l.prototype.importaddress.bind(Lt)),listunspent:m.promisify(l.prototype.listunspent.bind(Lt)),sendRawTransaction:m.promisify(l.prototype.sendRawTransaction.bind(Lt)),getNewAddress:Vt,sendToAddress:m.promisify(l.prototype.sendToAddress.bind(Lt)),getRawTransactionJSON:Gt};const zt={error:(t,e)=>{if(e.cn){const{host:s,port:n,database:a,user:r,password:o}=e.cn;Dt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${n}, database:${a}, user:${r}, password: ${o}`)}},noWarnings:!0};"dev"===dt&&ut>0&&(h.isAttached()?h.detach():(h.attach(zt),h.setTheme("matrix")));const qt=y(zt)({host:ht,port:Et,database:yt,user:lt,password:mt,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:Xt}=y;class Jt{static async select(t){const e=new Xt({name:`SyncStatus.select.${Math.random()}`,text:'SELECT "syncedHeight" FROM "SyncStatus" WHERE "workerId" = $1',values:[t]});return qt.one(e)}static async update({syncedHeight:t,workerId:e}){const s=new Xt({name:`SyncStatus.update.${Math.random()}`,text:'UPDATE "SyncStatus" SET "syncedHeight" = $1 WHERE "workerId" = $2',values:[t,e]});await qt.any(s)}static async insert({syncedHeight:t,workerId:e}){const s=new Xt({name:`SyncStatus.insert.${Math.random()}`,text:'INSERT INTO  "SyncStatus"("syncedHeight","workerId") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});await qt.any(s)}}class Zt{static async select(t){return Jt.select(t)}static async update(t){await Jt.update(t)}static async insert(t){await Jt.insert(t)}}class Qt{static updateSync=async t=>Zt.update(t);static selectSync=async t=>Zt.select(t);static insertSync=async t=>Zt.insert(t)}function te(t){if(!function(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}(t))throw new Error("Invalid rev")}const{PreparedStatement:ee}=y;class se{static async query(t){const{publicKey:e,hash:s,limit:n,offset:a,order:r,ids:o,mod:i}=t;if(n&&parseInt(n||"",10)>Mt||o&&o.length>Mt)throw new Error(`Can't fetch more than ${Mt} revs.`);if(r&&"ASC"!==r&&"DESC"!==r)throw new Error("Invalid order");let c;c=o?.length?'SELECT "rev", "id", array_position($1, "id") as ord\n        FROM "NonStandard" \n        WHERE true ':'SELECT "rev"\n        FROM "NonStandard"\n        WHERE true ';const d=[];s&&(d.push(s),c+=` AND "hash" = $${d.length}`),i&&(d.push(i),c+=` AND "mod" = $${d.length}`),o&&(o.map(te),d.push(o),c+=` AND "id" = ANY ($${d.length})`),e&&(d.push(e),c+=` AND $${d.length} = ANY ("publicKeys")`),r?(c+=` order by "lastUpdated" ${r}`,o?.length&&(c+=", ord")):o?.length&&(c+=" order by ord"),d.push(n||Mt),c+=` limit $${d.length}`,a&&(d.push(a),c+=` offset $${d.length}`);const p=new ee({name:`NonStandard.query.${Math.random()}`,text:c,values:d});return(await qt.any(p)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:s,hash:n,mod:a}){const r=new ee({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "hash", "mod") VALUES ($1, $2, $3, $4, $5) ON CONFLICT DO NOTHING',values:[t,e,s,n,a]});await qt.none(r)}static async update({id:t,rev:e,publicKeys:s}){const n=new ee({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "rev"=$2, "publicKeys"=$3 WHERE "id" = $1',values:[t,e,s]});return qt.none(n)}static async delete({rev:t}){const e=new ee({name:`NonStandard.delete.${Math.random()}`,text:'DELETE FROM "NonStandard" WHERE "rev" = $1',values:[t]});await qt.none(e)}static async getRevsByIds(t){if(t&&t.length>Mt)throw new Error(`Can't fetch more than ${Mt} revs.`);const e=new ee({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1)',values:[[t]]});return qt.any(e)}static async select(t){const e=new ee({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "hash", "mod" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return qt.oneOrNone(e)}}class ne{static async select(t){return se.select(t)}static async query(t){return se.query(t)}static async getRevsByIds(t){return se.getRevsByIds(t)}static async insert(t){return se.insert(t)}static async update(t){return se.update(t)}static async delete(t){return se.delete({rev:t})}}const{PreparedStatement:ae}=y;class re{static async getId(t){const e=new ae({name:`RevToId.select.${Math.random()}`,text:'SELECT "id" FROM "RevToId" WHERE "rev" = $1',values:[t]});const s=await qt.oneOrNone(e);return s?.id}static async insert(t){const e=new ae({name:`RevToId.insert.${Math.random()}`,text:'INSERT INTO "RevToId"("rev", "id") VALUES ($1, $2)  ON CONFLICT DO NOTHING',values:[t.rev,t.id]});await qt.none(e)}}class oe{static async getId(t){return re.getId(t)}static async insert(t){return re.insert(t)}}class ie{static add=async t=>{const{zip:e,outData:s}=t;for(let t=0;t<e.length;t+=1){const[n,a]=e[t];const{exp:r="",_owners:i=[],mod:c=""}=s[t]||{};if(!n&&a)te(a),await ne.insert({id:a,rev:a,publicKeys:i,hash:o.sha256(Buffer.from(r)).toString("hex"),mod:c}),await oe.insert({rev:a,id:a});else if(n&&a){const{id:t,hash:e,mod:s}=await ne.select(n)||{};await ne.update({id:t,rev:a,publicKeys:i,hash:e,mod:s}),await oe.insert({rev:a,id:t})}else n&&!a&&await ne.delete(n)}};static query=async t=>ne.query(t);static getRevsByIds=async t=>(await ne.getRevsByIds(t)).map((t=>t.rev))}const{PreparedStatement:ce}=y;class de{static async select(t){const e=new ce({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return qt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.outputSpent,t.spendingInput]));for(;e.length;){const t=e.splice(0,$t);const s=[];for(let e=1;e<=t.length;e+=2)s.push(`($${e}, $${e+1})`);const n=s.join(",");const a=new ce({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput") VALUES ${n} ON CONFLICT DO NOTHING`,values:t});await qt.none(a)}}static async count(t){const e=t.map((t=>t.outputSpent));const s=new ce({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const n=await qt.oneOrNone(s);return parseInt(n?.count,10)||0}}class pe{static async select(t){return de.select(t)}static async insert(t){return de.insert(t)}}class ue{static getNonCoinbaseRevs=t=>t.filter((t=>!i.isCoinbaseHash(t.input.hash))).map((({input:t,txId:e},s)=>{return{outputSpent:`${n=t.hash,r.reverseBuffer(Buffer.from(n)).toString("hex")}:${t.index}`,spendingInput:`${e}:${s}`};var n}));static insert=async t=>{pe.insert(this.getNonCoinbaseRevs(t))}}const{PreparedStatement:le}=y;class me{static async listSentOutputs(t){const e=new le({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await qt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new le({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await qt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new le({name:`Output.listTxs.${Math.random()}`,text:' -- List all txs sent from a given address\n            WITH SENT AS (\n              SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n              FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n              WHERE "Output".address = $1\n              GROUP BY split_part("Input"."spendingInput",\':\',1)\n            )\n            \n            -- List all tx received from a given address\n            , RECEIVED AS (\n              SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n              FROM "Output" \n              WHERE "address" = $1\n              GROUP BY "txId"\n            )\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n                SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId" ;',values:[t]});const s=(await qt.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new le({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Output" WHERE "address" = $1',values:[t]});return qt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,t.publicKeys]));for(;e.length;){const t=e.splice(0,$t);const s=[];for(let e=1;e<=t.length;e+=5)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const n=s.join(",");const a=new le({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "publicKeys") VALUES ${n}  ON CONFLICT DO NOTHING`,values:t});await qt.none(a)}}}class ye{static async select(t){return me.select(t)}static async insert(t){return me.insert(t)}static async listSentOutputs(t){return me.listSentOutputs(t)}static async listReceivedOutputs(t){return me.listReceivedOutputs(t)}static async listTxs(t){return me.listTxs(t)}}class he{static insert=async t=>{const e=t.flatMap((t=>t.tx.outs.map(((e,s)=>{const{script:n}=e;let a;let r;try{a=c.fromOutputScript(n,S(it,ct))}catch(t){a=null}try{r=d.p2ms({output:n,network:S(it,ct)}).pubkeys.map((t=>t.toString("hex")))}catch(t){r=null}const o=n.toString("hex");const i=Math.round(e.value);return{address:a,rev:`${t.txId}:${s}`,scriptPubKey:o,satoshis:i,publicKeys:r}}))));return ye.insert(e)};static listSentOutputs=async t=>ye.listSentOutputs(t);static listReceivedOutputs=async t=>ye.listReceivedOutputs(t);static listTxs=async t=>ye.listTxs(t)}const Ee=new e({chain:it,network:ct,url:pt});class Se{static waitForBlock=async e=>{await t((async()=>{Dt.info(`Sync workerId ${Tt}: waiting for block ${e} ...`),await jt.getBlockHash(e)}),{startingDelay:3e4,timeMultiple:1,numOfAttempts:720}),Dt.info(`Node is ready. Starting Sync actions for worker ${Tt}`)};static syncBlock=async t=>{const{result:e}=await jt.getBlockHash(t);const{result:s}=await jt.getBlock(e,2);const{tx:n}=s;const a=n.filter((t=>"08"!==t.hex.slice(10,12)));Dt.info(`Backfilling progress ${t} Backfilling ${a.length} transactions (${n.length-a.length} mweb tx's filtered)...`);const r=await Promise.allSettled(a.map((t=>Ee.txFromHex({hex:t.hex}))));const o=r.filter((t=>"fulfilled"===t.status)).map((t=>t.value));const i=r.filter((t=>"rejected"===t.status)).map((t=>t.reason));var c,d;i.length&&Dt.error(`Failed to parse ${i.length} transactions of block num ${t}: ${i.map((t=>t)).join(", ")}\n        Failed txs: ${c=a.map((t=>t.id)),d=o.map((t=>t.tx.getId())),c.filter((t=>-1===d.indexOf(t)))}`),await this.syncTxs(o,t)};static sync=async(t,e,s,n)=>{try{let a=e;const r=await Qt.selectSync(t);for(r.syncedHeight>e&&(a=r.syncedHeight+s),Dt.info(`Starting sync process { initialBlock: ${e} increment: ${s} nonStandard: ${n} syncedHeight:${r.syncedHeight}, currentBlockHeight:${a} }`);n||a<Ot;)try{await this.syncBlock(a),await Qt.updateSync({syncedHeight:a,workerId:t}),a+=s}catch(t){t.message.includes("out of range")||Dt.error(`Syncing block num ${a} failed with error '${t.message}'`)}}catch(t){Dt.error(`Sync action failed with error '${t.message}'`)}};static syncTxs=async(t,e)=>{try{await he.insert(t),await ue.insert(t.flatMap((t=>t.tx.ins.map((e=>({input:e,txId:t.txId})))))),e>=Ot&&t.map((async t=>{try{t.isBcTx(it,ct)&&await ie.add(t)}catch(e){Dt.error(`Failed to add non-standard tx ${t.tx.getId()} ${e.message}`)}}))}catch(t){Dt.error(`Processing block ${e} failed with error '${t.message}'`)}};static register=async t=>{try{await Qt.insertSync({syncedHeight:-1,workerId:t}),Dt.info(`Register workerId: '${t}'`)}catch(t){Dt.error(`Register action failed with error '${t.message}'`)}}}!function(){try{const e=`Synchronizing { nonStandard:${vt} url: ${pt}, chain:${it} network:${ct} numWorkers: ${Nt} workerId: ${Tt} }`;Dt.info(e),"regtest"!==ct&&(async()=>{if(await(async()=>{await t((()=>qt.connect()),{startingDelay:Rt})})(),await Se.register(Tt),vt)await Se.waitForBlock(Ot),await Se.sync(Tt,Ot,1,vt);else{const t=await Qt.selectSync(Tt);const e=t.syncedHeight>0?t.syncedHeight+1:Tt;Dt.info(`Worker ${Tt} waiting for block ${e}...`),await Se.waitForBlock(e),Dt.info(`Worker ${Tt} starting sync on block ${e}...`),await Se.sync(Tt,e,Nt,!1)}})()}catch(t){Dt.error(`Synchronizing failed with error '${t.message}'`)}}();
