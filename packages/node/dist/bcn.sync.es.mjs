import{backOff as t}from"exponential-backoff";import{Computer as e}from"@bitcoin-computer/lib";import s from"dotenv";import n from"fs";import{networks as a,bufferUtils as r,crypto as o,Transaction as i,initEccLib as c,address as d,payments as p}from"@bitcoin-computer/nakamotojs";import u from"winston";import l from"winston-daily-rotate-file";import m from"bitcoind-rpc";import h from"util";import y from"pg-promise";import E from"pg-monitor";import*as S from"@bitcoin-computer/tiny-secp256k1";s.config();const f=JSON.parse(n.readFileSync("package.json","utf8"));function w(t,e){switch(t){case"BTC":return"mainnet"===e?a.bitcoin:a.testnet;case"LTC":return"mainnet"===e?a.litecoin:a.litecoinregtest;default:throw new Error("We currently only support BTC and LTC, support for other currencies will be added soon.")}}const{PORT:g,ZMQ_URL:$,CHAIN:I,NETWORK:T,BCN_ENV:O,BCN_URL:R,DEBUG_MODE:N,POSTGRES_USER:v,POSTGRES_PASSWORD:x,POSTGRES_DB:M,POSTGRES_HOST:b,POSTGRES_PORT:C,RPC_PROTOCOL:H,RPC_USER:A,RPC_PASSWORD:D,RPC_HOST:L,RPC_PORT:_,SERVER_VERSION:k,DEFAULT_WALLET:P,POSTGRES_MAX_PARAM_NUM:Y,DB_CONNECTION_RETRY_TIME:B,SIGNATURE_FRESHNESS_MINUTES:F,ALLOWED_RPC_METHODS:W,MAX_BLOCKCHAIN_HEIGHT:U,MWEB_HEIGHT:G,BC_START_HEIGHT:K,WORKER_ID:V,NUM_WORKERS:j,SYNC_NON_STANDARD:z,ZMQ_WAIT_PERCENTAGE:q,QUERY_LIMIT:J,LOG_MAX_FILE_SIZE:Z,LOG_MAX_FILE_NUM:X,LOG_ZIP:Q}=process.env;const tt=parseInt(g,10)||"1031";const et=I||"LTC";const st=T||"regtest";const nt=O||"dev";const at=R||`http://127.0.0.1:${tt}`;const rt=parseInt(N,10)||1;const ot=v||"bcn";const it=x||"bcn";const ct=M||"bcn";const dt=b||"127.0.0.1";const pt=parseInt(C,10)||"5432";const ut=H||"http";const lt=A||"bcn-admin";const mt=D||"kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=";const ht=L||"node";const yt=parseInt(_,10)||19332;f.version;const Et=parseInt(Y,10)||1e4;const St=parseInt(B,10)||500;!W||W.split(",").map((t=>new RegExp(t)));const ft=parseInt(K||"",10)||25e5;const wt=parseInt(V,10)||1;const gt=parseInt(j||"",10)||1;const $t="true"===z||!1;const It=parseInt(J||"",10)||1e3;const Tt=Z||"20m";const Ot=X||"14d";const Rt=!!Q;u.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const Nt=u.format.combine(u.format.colorize(),u.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),u.format.json(),u.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const vt={zippedArchive:Rt,maxSize:Tt,maxFiles:Ot,dirname:"logs"};const xt=[];"dev"===nt&&xt.push(new u.transports.Console({format:u.format.combine(u.format.colorize(),u.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),u.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))})),rt>=0&&xt.push(new l({filename:"error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...vt})),rt>=1&&xt.push(new l({filename:"warn-%DATE%.log",datePattern:"YYYY-MM-DD",level:"warn",...vt})),rt>=2&&xt.push(new l({filename:"info-%DATE%.log",datePattern:"YYYY-MM-DD",level:"info",...vt})),rt>=3&&xt.push(new l({filename:"http-%DATE%.log",datePattern:"YYYY-MM-DD",level:"http",...vt})),rt>=4&&xt.push(new l({filename:"debug-%DATE%.log",datePattern:"YYYY-MM-DD",level:"debug",...vt}));const Mt=u.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:Nt,transports:xt,exceptionHandlers:[new u.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new u.transports.File({filename:"logs/rejections.log"})]});const bt=new m({protocol:ut,user:lt,pass:mt,host:ht,port:yt});const Ct=h.promisify(m.prototype.createwallet.bind(bt));const Ht=h.promisify(m.prototype.generateToAddress.bind(bt));const At=h.promisify(m.prototype.getaddressinfo.bind(bt));const Dt=h.promisify(m.prototype.getBlock.bind(bt));const Lt=h.promisify(m.prototype.getBlockchainInfo.bind(bt));const _t=h.promisify(m.prototype.getBlockHash.bind(bt));const kt=h.promisify(m.prototype.getRawTransaction.bind(bt));const Pt=h.promisify(m.prototype.getRawTransaction.bind(bt));const Yt=h.promisify(m.prototype.getTransaction.bind(bt));const Bt=h.promisify(m.prototype.getNewAddress.bind(bt));const Ft={createwallet:Ct,generateToAddress:Ht,getaddressinfo:At,getBlock:Dt,getBlockchainInfo:Lt,getBlockHash:_t,getRawTransaction:kt,getTransaction:Yt,importaddress:h.promisify(m.prototype.importaddress.bind(bt)),listunspent:h.promisify(m.prototype.listunspent.bind(bt)),sendRawTransaction:h.promisify(m.prototype.sendRawTransaction.bind(bt)),getNewAddress:Bt,sendToAddress:h.promisify(m.prototype.sendToAddress.bind(bt)),getRawTransactionJSON:Pt};const Wt={error:(t,e)=>{if(e.cn){const{host:s,port:n,database:a,user:r,password:o}=e.cn;Mt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${n}, database:${a}, user:${r}, password: ${o}`)}},noWarnings:!0};"dev"===nt&&rt>0&&(E.isAttached()?E.detach():(E.attach(Wt),E.setTheme("matrix")));const Ut=y(Wt)({host:dt,port:pt,database:ct,user:ot,password:it,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:Gt}=y;class Kt{static async select(t){const e=new Gt({name:`SyncStatus.select.${Math.random()}`,text:'SELECT "syncedHeight" FROM "SyncStatus" WHERE "workerId" = $1',values:[t]});return Ut.one(e)}static async update({syncedHeight:t,workerId:e}){const s=new Gt({name:`SyncStatus.update.${Math.random()}`,text:'UPDATE "SyncStatus" SET "syncedHeight" = $1 WHERE "workerId" = $2',values:[t,e]});await Ut.any(s)}static async insert({syncedHeight:t,workerId:e}){const s=new Gt({name:`SyncStatus.insert.${Math.random()}`,text:'INSERT INTO  "SyncStatus"("syncedHeight","workerId") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});await Ut.any(s)}}class Vt{static async select(t){return Kt.select(t)}static async update(t){await Kt.update(t)}static async insert(t){await Kt.insert(t)}}class jt{static updateSync=async t=>Vt.update(t);static selectSync=async t=>Vt.select(t);static insertSync=async t=>Vt.insert(t)}function zt(t){if(!function(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}(t))throw new Error("Invalid rev")}const{PreparedStatement:qt}=y;class Jt{static async query(t){const{publicKey:e,hash:s,limit:n,offset:a,order:r,ids:o,mod:i}=t;if(n&&parseInt(n||"",10)>It||o&&o.length>It)throw new Error(`Can't fetch more than ${It} revs.`);if(r&&"ASC"!==r&&"DESC"!==r)throw new Error("Invalid order");let c;c=o?.length?'SELECT "rev", "id", array_position($1, "id") as ord\n        FROM "NonStandard" \n        WHERE true ':'SELECT "rev"\n        FROM "NonStandard"\n        WHERE true ';const d=[];s&&(d.push(s),c+=` AND "hash" = $${d.length}`),i&&(d.push(i),c+=` AND "mod" = $${d.length}`),o&&(o.map(zt),d.push(o),c+=` AND "id" = ANY ($${d.length})`),e&&(d.push(e),c+=` AND $${d.length} = ANY ("publicKeys")`),r?(c+=` order by "lastUpdated" ${r}`,o?.length&&(c+=", ord")):o?.length&&(c+=" order by ord"),d.push(n||It),c+=` limit $${d.length}`,a&&(d.push(a),c+=` offset $${d.length}`);const p=new qt({name:`NonStandard.query.${Math.random()}`,text:c,values:d});return(await Ut.any(p)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:s,hash:n,mod:a}){const r=new qt({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "hash", "mod") VALUES ($1, $2, $3, $4, $5) ON CONFLICT DO NOTHING',values:[t,e,s,n,a]});await Ut.none(r)}static async update({id:t,rev:e,publicKeys:s}){const n=new qt({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "rev"=$2, "publicKeys"=$3 WHERE "id" = $1',values:[t,e,s]});return Ut.none(n)}static async delete({rev:t}){const e=new qt({name:`NonStandard.delete.${Math.random()}`,text:'DELETE FROM "NonStandard" WHERE "rev" = $1',values:[t]});await Ut.none(e)}static async getRevsByIds(t){if(t&&t.length>It)throw new Error(`Can't fetch more than ${It} revs.`);const e=new qt({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1)',values:[[t]]});return Ut.any(e)}static async select(t){const e=new qt({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "hash", "mod" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return Ut.oneOrNone(e)}}class Zt{static async select(t){return Jt.select(t)}static async query(t){return Jt.query(t)}static async getRevsByIds(t){return Jt.getRevsByIds(t)}static async insert(t){return Jt.insert(t)}static async update(t){return Jt.update(t)}static async delete(t){return Jt.delete({rev:t})}}const{PreparedStatement:Xt}=y;class Qt{static async getId(t){const e=new Xt({name:`RevToId.select.${Math.random()}`,text:'SELECT "id" FROM "RevToId" WHERE "rev" = $1',values:[t]});const s=await Ut.oneOrNone(e);return s?.id}static async insert(t){const e=new Xt({name:`RevToId.insert.${Math.random()}`,text:'INSERT INTO "RevToId"("rev", "id") VALUES ($1, $2)  ON CONFLICT DO NOTHING',values:[t.rev,t.id]});await Ut.none(e)}}class te{static async getId(t){return Qt.getId(t)}static async insert(t){return Qt.insert(t)}}class ee{static add=async t=>{const{zip:e,outData:s}=t;for(let t=0;t<e.length;t+=1){const[n,a]=e[t];const{exp:r="",_owners:i=[],mod:c=""}=s[t]||{};if(!n&&a)zt(a),await Zt.insert({id:a,rev:a,publicKeys:i,hash:o.sha256(Buffer.from(r)).toString("hex"),mod:c}),await te.insert({rev:a,id:a});else if(n&&a){const{id:t,hash:e,mod:s}=await Zt.select(n)||{};await Zt.update({id:t,rev:a,publicKeys:i,hash:e,mod:s}),await te.insert({rev:a,id:t})}else n&&!a&&await Zt.delete(n)}};static query=async t=>Zt.query(t);static getRevsByIds=async t=>(await Zt.getRevsByIds(t)).map((t=>t.rev))}const{PreparedStatement:se}=y;class ne{static async select(t){const e=new se({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return Ut.any(e)}static async insert(t){const e=t.flatMap((t=>[t.outputSpent,t.spendingInput]));for(;e.length;){const t=e.splice(0,Et);const s=[];for(let e=1;e<=t.length;e+=2)s.push(`($${e}, $${e+1})`);const n=s.join(",");const a=new se({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput") VALUES ${n} ON CONFLICT DO NOTHING`,values:t});await Ut.none(a)}}static async count(t){const e=t.map((t=>t.outputSpent));const s=new se({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const n=await Ut.oneOrNone(s);return parseInt(n?.count,10)||0}}class ae{static async select(t){return ne.select(t)}static async insert(t){return ne.insert(t)}}class re{static getNonCoinbaseRevs=t=>t.filter((t=>!i.isCoinbaseHash(t.input.hash))).map((({input:t,txId:e},s)=>{return{outputSpent:`${n=t.hash,r.reverseBuffer(Buffer.from(n)).toString("hex")}:${t.index}`,spendingInput:`${e}:${s}`};var n}));static insert=async t=>{ae.insert(this.getNonCoinbaseRevs(t))}}const{PreparedStatement:oe}=y;class ie{static async listSentOutputs(t){const e=new oe({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await Ut.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new oe({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await Ut.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new oe({name:`Output.listTxs.${Math.random()}`,text:' -- List all txs sent from a given address\n            WITH SENT AS (\n              SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n              FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n              WHERE "Output".address = $1\n              GROUP BY split_part("Input"."spendingInput",\':\',1)\n            )\n            \n            -- List all tx received from a given address\n            , RECEIVED AS (\n              SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n              FROM "Output" \n              WHERE "address" = $1\n              GROUP BY "txId"\n            )\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n                SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId" ;',values:[t]});const s=(await Ut.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new oe({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Output" WHERE "address" = $1',values:[t]});return Ut.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,t.publicKeys]));for(;e.length;){const t=e.splice(0,Et);const s=[];for(let e=1;e<=t.length;e+=5)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const n=s.join(",");const a=new oe({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "publicKeys") VALUES ${n}  ON CONFLICT DO NOTHING`,values:t});await Ut.none(a)}}}class ce{static async select(t){return ie.select(t)}static async insert(t){return ie.insert(t)}static async listSentOutputs(t){return ie.listSentOutputs(t)}static async listReceivedOutputs(t){return ie.listReceivedOutputs(t)}static async listTxs(t){return ie.listTxs(t)}}c(S);class de{static insert=async t=>{const e=t.flatMap((t=>t.tx.outs.map(((e,s)=>{const{script:n}=e;let a;let r;try{a=d.fromOutputScript(n,w(et,st))}catch(t){a=null}try{r=p.p2ms({output:n,network:w(et,st)}).pubkeys.map((t=>t.toString("hex"))),r.some((t=>t.length>66))&&(r=null)}catch(t){r=null}const o=n.toString("hex");const i=Math.round(e.value);return{address:a,rev:`${t.txId}:${s}`,scriptPubKey:o,satoshis:i,publicKeys:r}}))));return ce.insert(e)};static listSentOutputs=async t=>ce.listSentOutputs(t);static listReceivedOutputs=async t=>ce.listReceivedOutputs(t);static listTxs=async t=>ce.listTxs(t)}const pe=new e({chain:et,network:st,url:at});class ue{static waitForBlockHash=async e=>(await t((async()=>{let t;try{t=await Ft.getBlockHash(e)}catch(t){throw Mt.info(`Sync workerId ${wt}: waiting for block ${e} ...`),t}return t}),{startingDelay:3e4,timeMultiple:1,numOfAttempts:720})).result;static syncBlock=async(t,e="LTC")=>{const s=await ue.waitForBlockHash(t);const{result:n}=await Ft.getBlock(s,2);const{tx:a}=n;let r=a;"LTC"===e&&(r=a.filter((t=>"08"!==t.hex.slice(10,12))));const o=`Backfilling progress ${t} Backfilling ${r.length} txs `;"LTC"===e&&o.concat(`(${a.length-r.length} mweb tx's filtered)...`),Mt.info(o);const i=await Promise.allSettled(r.map((t=>pe.txFromHex({hex:t.hex}))));const c=i.filter((t=>"fulfilled"===t.status)).map((t=>t.value));const d=i.filter((t=>"rejected"===t.status)).map((t=>t.reason));var p,u;d.length&&Mt.error(`Failed to parse ${d.length} transactions of block num ${t}: ${d.map((t=>t)).join(", ")}\n        Failed txs: ${p=r.map((t=>t.id)),u=c.map((t=>t.tx.getId())),p.filter((t=>-1===u.indexOf(t)))}`),await this.syncTxs(c,t)};static sync=async(t,e,s,n,a,r)=>{let o=e;if(n&&1!==s){const e=`Non standard worker ${t} is not supposed to sync non standard blocks with increment ${s}. Please check the configuration.`;throw Mt.error(e),new Error(e)}if(!n){if((o-t)%a!=0){const e=`Worker ${t} is not supposed to sync block ${o}. Please check the configuration.`;throw Mt.error(e),new Error(e)}if(s!==a){const e=`Worker ${t} is not supposed to sync with increment ${s}. Please check the configuration.`;throw Mt.error(e),new Error(e)}}for(Mt.info(`WorkerId ${t} starting sync on blockToSync: ${o} - \n       increment: ${s} - sycNonStandard: ${n} - numWorkers: ${a} }`);n||o<r;){try{await this.syncBlock(o,et)}catch(t){Mt.error(`Syncing block num ${o} failed with error '${t.message}'`)}await jt.updateSync({syncedHeight:o,workerId:t}),o+=s}};static syncTxs=async(t,e)=>{try{await de.insert(t),await re.insert(t.flatMap((t=>t.tx.ins.map((e=>({input:e,txId:t.txId})))))),e>=ft&&t.map((async t=>{try{t.isBcTx(et,st)&&await ee.add(t)}catch(e){Mt.error(`Failed to add non-standard tx ${t.tx.getId()} ${e.message}`)}}))}catch(t){Mt.error(`Processing block ${e} failed with error '${t.message}'`)}};static register=async t=>{try{await jt.insertSync({syncedHeight:-1,workerId:t}),Mt.info(`Register workerId: '${t}'`)}catch(t){Mt.error(`Register action failed with error '${t.message}'`)}}}!function(){try{const e=`Synchronizing { nonStandard:${$t} url: ${at}, chain:${et} network:${st} numWorkers: ${gt} workerId: ${wt} activationHeight: ${ft} }`;Mt.info(e),"regtest"!==st&&(async()=>{if(await(async()=>{await t((()=>Ut.connect()),{startingDelay:St})})(),await ue.register(wt),$t)await ue.sync(wt,ft,1,$t,gt,ft);else{const t=await jt.selectSync(wt);const e=t.syncedHeight>0?t.syncedHeight+gt:wt;await ue.sync(wt,e,gt,!1,gt,ft)}})()}catch(t){Mt.error(`Synchronizing failed with error '${t.message}'`)}}();
